name: iOS Testing

on:
  push:
    branches: [main, develop]
    paths:
      - 'ios/**'
      - '.github/workflows/ios-tests.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'ios/**'

env:
  XCODE_VERSION: '15.4'

jobs:
  lint-and-format:
    name: Swift Lint and Format Check
    runs-on: macos-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Homebrew
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            /usr/local/Homebrew
          key: brew-${{ runner.os }}-${{ hashFiles('.github/workflows/ios-tests.yml') }}
          restore-keys: |
            brew-${{ runner.os }}-

      - name: Install Tools
        run: |
          brew list swiftlint &>/dev/null || brew install swiftlint
          brew list swift-format &>/dev/null || brew install swift-format

      - name: Run SwiftLint
        run: |
          cd ios
          swiftlint lint --reporter github-actions-logging

      - name: Check Swift Formatting
        run: |
          cd ios
          swift-format lint --recursive HealthKitBridge/

  ios-tests:
    name: iOS Unit and UI Tests
    runs-on: macos-latest
    timeout-minutes: 45
    permissions:
      contents: read

    strategy:
      fail-fast: false
      matrix:
        test-type: ['unit', 'ui']
        device: ['iPhone 15', 'iPad Air (5th generation)']
        exclude:
          # Only run UI tests on iPhone to reduce CI time
          - test-type: 'ui'
            device: 'iPad Air (5th generation)'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Cache Xcode Derived Data
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData
            ios/build
          key: xcode-${{ runner.os }}-${{ env.XCODE_VERSION }}-${{ matrix.device }}-${{ hashFiles('ios/**/*.swift', 'ios/**/*.plist', 'ios/**/*.xcconfig') }}
          restore-keys: |
            xcode-${{ runner.os }}-${{ env.XCODE_VERSION }}-${{ matrix.device }}-
            xcode-${{ runner.os }}-${{ env.XCODE_VERSION }}-

      - name: Setup Simulator
        id: simulator
        run: |
          # Create and boot simulator
          UDID=$(xcrun simctl create "CI-${{ matrix.device }}" "${{ matrix.device }}")
          xcrun simctl boot "$UDID"
          echo "udid=$UDID" >> $GITHUB_OUTPUT

          # Wait for simulator to be ready
          xcrun simctl bootstatus "$UDID"

      - name: Build for Testing
        run: |
          xcodebuild build-for-testing \
            -project ios/HealthKitBridge.xcodeproj \
            -scheme HealthKitBridge \
            -destination "platform=iOS Simulator,id=${{ steps.simulator.outputs.udid }}" \
            -derivedDataPath ios/build \
            -enableCodeCoverage YES

      - name: Run Unit Tests
        if: matrix.test-type == 'unit'
        run: |
          xcodebuild test-without-building \
            -project ios/HealthKitBridge.xcodeproj \
            -scheme HealthKitBridge \
            -destination "platform=iOS Simulator,id=${{ steps.simulator.outputs.udid }}" \
            -derivedDataPath ios/build \
            -enableCodeCoverage YES \
            -only-testing HealthKitBridgeTests

      - name: Run UI Tests
        if: matrix.test-type == 'ui'
        run: |
          xcodebuild test-without-building \
            -project ios/HealthKitBridge.xcodeproj \
            -scheme HealthKitBridge \
            -destination "platform=iOS Simulator,id=${{ steps.simulator.outputs.udid }}" \
            -derivedDataPath ios/build \
            -only-testing HealthKitBridgeUITests

      - name: Generate Coverage Report
        if: matrix.test-type == 'unit'
        run: |
          xcrun xccov view \
            --report \
            --json \
            ios/build/Logs/Test/*.xcresult > ios/coverage-${{ matrix.device }}.json 2>/dev/null || echo "No coverage data"

      - name: Upload Coverage Reports
        if: matrix.test-type == 'unit' && hashFiles('ios/coverage-*.json') != ''
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.device }}
          path: ios/coverage-*.json
          retention-days: 7

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}-${{ matrix.device }}
          path: ios/build/Logs/Test/*.xcresult
          retention-days: 7

      - name: Cleanup Simulator
        if: always()
        run: |
          xcrun simctl shutdown "${{ steps.simulator.outputs.udid }}" 2>/dev/null || true
          xcrun simctl delete "${{ steps.simulator.outputs.udid }}" 2>/dev/null || true

  performance-tests:
    name: Performance Tests
    runs-on: macos-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Cache Xcode Derived Data
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData
            ios/build
          key: xcode-perf-${{ runner.os }}-${{ env.XCODE_VERSION }}-${{ hashFiles('ios/**/*.swift') }}

      - name: Run Performance Tests
        run: |
          UDID=$(xcrun simctl create "Perf-iPhone" "iPhone 15")
          xcrun simctl boot "$UDID"
          xcrun simctl bootstatus "$UDID"

          xcodebuild test \
            -project ios/HealthKitBridge.xcodeproj \
            -scheme HealthKitBridge \
            -destination "platform=iOS Simulator,id=$UDID" \
            -derivedDataPath ios/build \
            -only-testing "PerformanceMonitorTests" || echo "Performance tests completed"

          xcrun simctl shutdown "$UDID" 2>/dev/null || true
          xcrun simctl delete "$UDID" 2>/dev/null || true

      - name: Upload Performance Results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: ios/build/Logs/Test/*.xcresult
          retention-days: 14
