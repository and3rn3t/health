name: iOS Testing

on:
  push:
    branches: [main, develop]
    paths:
      - 'ios/**'
      - '.github/workflows/ios-tests.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'ios/**'

env:
  XCODE_VERSION: '16.1'

jobs:
  lint-and-format:
    name: Swift Lint and Format Check
    runs-on: macos-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Homebrew
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            /usr/local/Homebrew
          key: brew-${{ runner.os }}-${{ hashFiles('.github/workflows/ios-tests.yml') }}
          restore-keys: |
            brew-${{ runner.os }}-

      - name: Install Tools
        run: |
          # Check if tools are already installed to speed up CI
          if ! command -v swiftlint &> /dev/null; then
            echo "Installing SwiftLint..."
            brew install swiftlint
          else
            echo "✅ SwiftLint already installed: $(swiftlint version)"
          fi

          if ! command -v swift-format &> /dev/null; then
            echo "Installing swift-format..."
            brew install swift-format
          else
            echo "✅ swift-format already installed"
          fi

      - name: Run SwiftLint
        working-directory: ios
        continue-on-error: true
        run: |
          swiftlint lint --reporter github-actions-logging --lenient

      - name: Check Swift Formatting
        continue-on-error: true
        run: |
          cd ios
          swift-format lint --recursive HealthKitBridge/

  ios-tests:
    name: iOS Unit and UI Tests
    runs-on: macos-latest
    timeout-minutes: 45
    permissions:
      contents: read

    strategy:
      fail-fast: false
      matrix:
        test-type: ['unit', 'ui']
        device: ['iPhone 16', 'iPad Air 11-inch (M2)']
        exclude:
          # Only run UI tests on iPhone to reduce CI time
          - test-type: 'ui'
            device: 'iPad Air 11-inch (M2)'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Cache Xcode Derived Data
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData
            ios/build
          key: xcode-${{ runner.os }}-${{ env.XCODE_VERSION }}-${{ matrix.device }}-${{ hashFiles('ios/**/*.swift', 'ios/**/*.plist', 'ios/**/*.xcconfig') }}
          restore-keys: |
            xcode-${{ runner.os }}-${{ env.XCODE_VERSION }}-${{ matrix.device }}-
            xcode-${{ runner.os }}-${{ env.XCODE_VERSION }}-

      - name: Setup Simulator
        id: simulator
        run: |
          DEVICE_NAME="${{ matrix.device }}"
          echo "Setting up simulator for: $DEVICE_NAME"

          # List available runtimes and devices for debugging
          echo "Available iOS runtimes:"
          xcrun simctl list runtimes | grep iOS || true
          echo "Available device types matching '$DEVICE_NAME':"
          xcrun simctl list devicetypes | grep "$DEVICE_NAME" || true

          # Check if device already exists and is available
          EXISTING_UDID=$(xcrun simctl list devices available | grep "$DEVICE_NAME" | head -1 | grep -oE '[0-9A-F-]{36}' || echo "")

          if [ ! -z "$EXISTING_UDID" ]; then
            echo "Using existing available simulator: $EXISTING_UDID"
            echo "udid=$EXISTING_UDID" >> $GITHUB_OUTPUT
            xcrun simctl boot "$EXISTING_UDID" 2>/dev/null || true
          else
            # Try to find the newest available iOS runtime
            RUNTIME=$(xcrun simctl list runtimes | grep iOS | tail -1 | grep -o 'com.apple.CoreSimulator.SimRuntime.iOS-[0-9-]*' || echo "")
            echo "Using runtime: $RUNTIME"

            # Create new simulator
            if [ ! -z "$RUNTIME" ]; then
              UDID=$(xcrun simctl create "CI-$DEVICE_NAME" "$DEVICE_NAME" "$RUNTIME" 2>/dev/null || echo "")
            else
              # Fallback to default runtime
              UDID=$(xcrun simctl create "CI-$DEVICE_NAME" "$DEVICE_NAME" 2>/dev/null || echo "")
            fi

            if [ -z "$UDID" ]; then
              echo "Failed to create simulator, trying any available iPhone/iPad..."
              # Final fallback - use any available iPhone or iPad
              if [[ "$DEVICE_NAME" == *"iPhone"* ]]; then
                FALLBACK_UDID=$(xcrun simctl list devices available | grep "iPhone" | head -1 | grep -oE '[0-9A-F-]{36}' || echo "")
              else
                FALLBACK_UDID=$(xcrun simctl list devices available | grep "iPad" | head -1 | grep -oE '[0-9A-F-]{36}' || echo "")
              fi

              if [ ! -z "$FALLBACK_UDID" ]; then
                echo "Using fallback device: $FALLBACK_UDID"
                echo "udid=$FALLBACK_UDID" >> $GITHUB_OUTPUT
                xcrun simctl boot "$FALLBACK_UDID" 2>/dev/null || true
              else
                echo "No suitable simulators found"
                exit 1
              fi
            else
              echo "Created simulator: $UDID"
              echo "udid=$UDID" >> $GITHUB_OUTPUT
              xcrun simctl boot "$UDID"
            fi
          fi

          # Wait for simulator to be ready with timeout
          FINAL_UDID=$(cat $GITHUB_OUTPUT | grep "udid=" | cut -d= -f2)
          timeout 60 xcrun simctl bootstatus "$FINAL_UDID" || {
            echo "Simulator boot may have timed out, but continuing..."
            xcrun simctl list devices | grep "$FINAL_UDID" || echo "Device not found in list"
          }

      - name: Build for Testing
        run: |
          # Use a conservative deployment target that should be available
          xcodebuild build-for-testing \
            -project ios/HealthKitBridge.xcodeproj \
            -scheme HealthKitBridge \
            -destination "platform=iOS Simulator,id=${{ steps.simulator.outputs.udid }}" \
            -derivedDataPath ios/build \
            -enableCodeCoverage YES \
            IPHONEOS_DEPLOYMENT_TARGET=17.0

      - name: Run Unit Tests
        if: matrix.test-type == 'unit'
        run: |
          xcodebuild test-without-building \
            -project ios/HealthKitBridge.xcodeproj \
            -scheme HealthKitBridge \
            -destination "platform=iOS Simulator,id=${{ steps.simulator.outputs.udid }}" \
            -derivedDataPath ios/build \
            -enableCodeCoverage YES \
            IPHONEOS_DEPLOYMENT_TARGET=17.0 \
            -only-testing HealthKitBridgeTests

      - name: Run UI Tests
        if: matrix.test-type == 'ui'
        run: |
          xcodebuild test-without-building \
            -project ios/HealthKitBridge.xcodeproj \
            -scheme HealthKitBridge \
            -destination "platform=iOS Simulator,id=${{ steps.simulator.outputs.udid }}" \
            -derivedDataPath ios/build \
            -only-testing HealthKitBridgeUITests

      - name: Generate Coverage Report
        if: matrix.test-type == 'unit'
        run: |
          xcrun xccov view \
            --report \
            --json \
            ios/build/Logs/Test/*.xcresult > ios/coverage-${{ matrix.device }}.json 2>/dev/null || echo "No coverage data"

      - name: Upload Coverage Reports
        if: matrix.test-type == 'unit' && hashFiles('ios/coverage-*.json') != ''
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.device }}
          path: ios/coverage-*.json
          retention-days: 7

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}-${{ matrix.device }}
          path: ios/build/Logs/Test/*.xcresult
          retention-days: 7

      - name: Cleanup Simulator
        if: always()
        run: |
          xcrun simctl shutdown "${{ steps.simulator.outputs.udid }}" 2>/dev/null || true
          xcrun simctl delete "${{ steps.simulator.outputs.udid }}" 2>/dev/null || true

  performance-tests:
    name: Performance Tests
    runs-on: macos-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Cache Xcode Derived Data
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData
            ios/build
          key: xcode-perf-${{ runner.os }}-${{ env.XCODE_VERSION }}-${{ hashFiles('ios/**/*.swift') }}

      - name: Run Performance Tests
        run: |
          UDID=$(xcrun simctl create "Perf-iPhone" "iPhone 16")
          xcrun simctl boot "$UDID"
          xcrun simctl bootstatus "$UDID"

          xcodebuild test \
            -project ios/HealthKitBridge.xcodeproj \
            -scheme HealthKitBridge \
            -destination "platform=iOS Simulator,id=$UDID" \
            -derivedDataPath ios/build \
            -only-testing "PerformanceMonitorTests" || echo "Performance tests completed"

          xcrun simctl shutdown "$UDID" 2>/dev/null || true
          xcrun simctl delete "$UDID" 2>/dev/null || true

      - name: Upload Performance Results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: ios/build/Logs/Test/*.xcresult
          retention-days: 14
