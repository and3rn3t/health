name = "health-app"
main = "dist-worker/index.js"
compatibility_date = "2024-08-30"
compatibility_flags = ["nodejs_compat"]

[build]
command = "npm run build:worker"
cwd = "."
watch_dir = "src"

# Development environment
[env.development]
name = "health-app-dev"
vars = { ENVIRONMENT = "development", ALLOWED_ORIGINS = "http://localhost:5173,http://127.0.0.1:5173,http://localhost:5000,http://127.0.0.1:5000" }

[env.development.durable_objects]
bindings = [
  { name = "HEALTH_WEBSOCKET", class_name = "HealthWebSocket" },
  { name = "RATE_LIMITER", class_name = "RateLimiter" }
]

# Production environment
[env.production]
name = "health-app-prod"
vars = { ENVIRONMENT = "production", ALLOWED_ORIGINS = "https://yourdomain.example" }

# Assets configuration for static files (temporarily disabled for debugging)
# [assets]
# directory = "./dist"
# binding = "ASSETS"

# KV storage for session/cache data
# [[kv_namespaces]]
# binding = "HEALTH_KV"
# id = "<KV_NAMESPACE_ID>" # TODO: set via `wrangler kv namespace create HEALTH_KV`
# preview_id = "<KV_NAMESPACE_PREVIEW_ID>"

# R2 bucket for file storage
# [[r2_buckets]]
# binding = "HEALTH_STORAGE"
# bucket_name = "<R2_BUCKET_NAME>" # TODO: create and set bucket name

# WebSocket support
[durable_objects]
bindings = [
  { name = "HEALTH_WEBSOCKET", class_name = "HealthWebSocket" },
  { name = "RATE_LIMITER", class_name = "RateLimiter" }
]

# Durable Objects migrations
[[migrations]]
tag = "v1"
new_classes = ["HealthWebSocket", "RateLimiter"]

# Analytics (optional)
# [[analytics_engine_datasets]]
# binding = "HEALTH_ANALYTICS"
# dataset = "health_analytics" # optional custom dataset name

# Custom domain configuration (to be set up later)
# [env.production.routes]
# pattern = "health.yourdomain.com/*"
# zone_name = "yourdomain.com"

# Secrets to set via Wrangler (do not commit):
# wrangler secret put ENC_KEY
# wrangler secret put API_ISS
# wrangler secret put API_AUD
# wrangler secret put API_JWKS_URL
# wrangler secret put DEVICE_JWT_SECRET

# Note: For distributed rate limiting and session management, prefer Durable Objects.

# Cron trigger for scheduled purge
[triggers]
crons = ["0 * * * *"] # hourly
