{"version":3,"file":"index.js","sources":["../node_modules/hono/dist/compose.js","../node_modules/hono/dist/request/constants.js","../node_modules/hono/dist/utils/body.js","../node_modules/hono/dist/utils/url.js","../node_modules/hono/dist/request.js","../node_modules/hono/dist/utils/html.js","../node_modules/hono/dist/context.js","../node_modules/hono/dist/router.js","../node_modules/hono/dist/utils/constants.js","../node_modules/hono/dist/hono-base.js","../node_modules/hono/dist/router/reg-exp-router/node.js","../node_modules/hono/dist/router/reg-exp-router/trie.js","../node_modules/hono/dist/router/reg-exp-router/router.js","../node_modules/hono/dist/router/smart-router/router.js","../node_modules/hono/dist/router/trie-router/node.js","../node_modules/hono/dist/router/trie-router/router.js","../node_modules/hono/dist/hono.js","../node_modules/zod/v3/helpers/util.js","../node_modules/zod/v3/ZodError.js","../node_modules/zod/v3/locales/en.js","../node_modules/zod/v3/errors.js","../node_modules/zod/v3/helpers/parseUtil.js","../node_modules/zod/v3/helpers/errorUtil.js","../node_modules/zod/v3/types.js","../src/schemas/health.ts","../src/lib/security.ts","../src/lib/retention.ts","../src/worker.ts"],"sourcesContent":["// src/compose.ts\nvar compose = (middleware, onError, onNotFound) => {\n  return (context, next) => {\n    let index = -1;\n    return dispatch(0);\n    async function dispatch(i) {\n      if (i <= index) {\n        throw new Error(\"next() called multiple times\");\n      }\n      index = i;\n      let res;\n      let isError = false;\n      let handler;\n      if (middleware[i]) {\n        handler = middleware[i][0][0];\n        context.req.routeIndex = i;\n      } else {\n        handler = i === middleware.length && next || void 0;\n      }\n      if (handler) {\n        try {\n          res = await handler(context, () => dispatch(i + 1));\n        } catch (err) {\n          if (err instanceof Error && onError) {\n            context.error = err;\n            res = await onError(err, context);\n            isError = true;\n          } else {\n            throw err;\n          }\n        }\n      } else {\n        if (context.finalized === false && onNotFound) {\n          res = await onNotFound(context);\n        }\n      }\n      if (res && (context.finalized === false || isError)) {\n        context.res = res;\n      }\n      return context;\n    }\n  };\n};\nexport {\n  compose\n};\n","// src/request/constants.ts\nvar GET_MATCH_RESULT = Symbol();\nexport {\n  GET_MATCH_RESULT\n};\n","// src/utils/body.ts\nimport { HonoRequest } from \"../request.js\";\nvar parseBody = async (request, options = /* @__PURE__ */ Object.create(null)) => {\n  const { all = false, dot = false } = options;\n  const headers = request instanceof HonoRequest ? request.raw.headers : request.headers;\n  const contentType = headers.get(\"Content-Type\");\n  if (contentType?.startsWith(\"multipart/form-data\") || contentType?.startsWith(\"application/x-www-form-urlencoded\")) {\n    return parseFormData(request, { all, dot });\n  }\n  return {};\n};\nasync function parseFormData(request, options) {\n  const formData = await request.formData();\n  if (formData) {\n    return convertFormDataToBodyData(formData, options);\n  }\n  return {};\n}\nfunction convertFormDataToBodyData(formData, options) {\n  const form = /* @__PURE__ */ Object.create(null);\n  formData.forEach((value, key) => {\n    const shouldParseAllValues = options.all || key.endsWith(\"[]\");\n    if (!shouldParseAllValues) {\n      form[key] = value;\n    } else {\n      handleParsingAllValues(form, key, value);\n    }\n  });\n  if (options.dot) {\n    Object.entries(form).forEach(([key, value]) => {\n      const shouldParseDotValues = key.includes(\".\");\n      if (shouldParseDotValues) {\n        handleParsingNestedValues(form, key, value);\n        delete form[key];\n      }\n    });\n  }\n  return form;\n}\nvar handleParsingAllValues = (form, key, value) => {\n  if (form[key] !== void 0) {\n    if (Array.isArray(form[key])) {\n      ;\n      form[key].push(value);\n    } else {\n      form[key] = [form[key], value];\n    }\n  } else {\n    if (!key.endsWith(\"[]\")) {\n      form[key] = value;\n    } else {\n      form[key] = [value];\n    }\n  }\n};\nvar handleParsingNestedValues = (form, key, value) => {\n  let nestedForm = form;\n  const keys = key.split(\".\");\n  keys.forEach((key2, index) => {\n    if (index === keys.length - 1) {\n      nestedForm[key2] = value;\n    } else {\n      if (!nestedForm[key2] || typeof nestedForm[key2] !== \"object\" || Array.isArray(nestedForm[key2]) || nestedForm[key2] instanceof File) {\n        nestedForm[key2] = /* @__PURE__ */ Object.create(null);\n      }\n      nestedForm = nestedForm[key2];\n    }\n  });\n};\nexport {\n  parseBody\n};\n","// src/utils/url.ts\nvar splitPath = (path) => {\n  const paths = path.split(\"/\");\n  if (paths[0] === \"\") {\n    paths.shift();\n  }\n  return paths;\n};\nvar splitRoutingPath = (routePath) => {\n  const { groups, path } = extractGroupsFromPath(routePath);\n  const paths = splitPath(path);\n  return replaceGroupMarks(paths, groups);\n};\nvar extractGroupsFromPath = (path) => {\n  const groups = [];\n  path = path.replace(/\\{[^}]+\\}/g, (match, index) => {\n    const mark = `@${index}`;\n    groups.push([mark, match]);\n    return mark;\n  });\n  return { groups, path };\n};\nvar replaceGroupMarks = (paths, groups) => {\n  for (let i = groups.length - 1; i >= 0; i--) {\n    const [mark] = groups[i];\n    for (let j = paths.length - 1; j >= 0; j--) {\n      if (paths[j].includes(mark)) {\n        paths[j] = paths[j].replace(mark, groups[i][1]);\n        break;\n      }\n    }\n  }\n  return paths;\n};\nvar patternCache = {};\nvar getPattern = (label, next) => {\n  if (label === \"*\") {\n    return \"*\";\n  }\n  const match = label.match(/^\\:([^\\{\\}]+)(?:\\{(.+)\\})?$/);\n  if (match) {\n    const cacheKey = `${label}#${next}`;\n    if (!patternCache[cacheKey]) {\n      if (match[2]) {\n        patternCache[cacheKey] = next && next[0] !== \":\" && next[0] !== \"*\" ? [cacheKey, match[1], new RegExp(`^${match[2]}(?=/${next})`)] : [label, match[1], new RegExp(`^${match[2]}$`)];\n      } else {\n        patternCache[cacheKey] = [label, match[1], true];\n      }\n    }\n    return patternCache[cacheKey];\n  }\n  return null;\n};\nvar tryDecode = (str, decoder) => {\n  try {\n    return decoder(str);\n  } catch {\n    return str.replace(/(?:%[0-9A-Fa-f]{2})+/g, (match) => {\n      try {\n        return decoder(match);\n      } catch {\n        return match;\n      }\n    });\n  }\n};\nvar tryDecodeURI = (str) => tryDecode(str, decodeURI);\nvar getPath = (request) => {\n  const url = request.url;\n  const start = url.indexOf(\n    \"/\",\n    url.charCodeAt(9) === 58 ? 13 : 8\n  );\n  let i = start;\n  for (; i < url.length; i++) {\n    const charCode = url.charCodeAt(i);\n    if (charCode === 37) {\n      const queryIndex = url.indexOf(\"?\", i);\n      const path = url.slice(start, queryIndex === -1 ? void 0 : queryIndex);\n      return tryDecodeURI(path.includes(\"%25\") ? path.replace(/%25/g, \"%2525\") : path);\n    } else if (charCode === 63) {\n      break;\n    }\n  }\n  return url.slice(start, i);\n};\nvar getQueryStrings = (url) => {\n  const queryIndex = url.indexOf(\"?\", 8);\n  return queryIndex === -1 ? \"\" : \"?\" + url.slice(queryIndex + 1);\n};\nvar getPathNoStrict = (request) => {\n  const result = getPath(request);\n  return result.length > 1 && result.at(-1) === \"/\" ? result.slice(0, -1) : result;\n};\nvar mergePath = (base, sub, ...rest) => {\n  if (rest.length) {\n    sub = mergePath(sub, ...rest);\n  }\n  return `${base?.[0] === \"/\" ? \"\" : \"/\"}${base}${sub === \"/\" ? \"\" : `${base?.at(-1) === \"/\" ? \"\" : \"/\"}${sub?.[0] === \"/\" ? sub.slice(1) : sub}`}`;\n};\nvar checkOptionalParameter = (path) => {\n  if (path.charCodeAt(path.length - 1) !== 63 || !path.includes(\":\")) {\n    return null;\n  }\n  const segments = path.split(\"/\");\n  const results = [];\n  let basePath = \"\";\n  segments.forEach((segment) => {\n    if (segment !== \"\" && !/\\:/.test(segment)) {\n      basePath += \"/\" + segment;\n    } else if (/\\:/.test(segment)) {\n      if (/\\?/.test(segment)) {\n        if (results.length === 0 && basePath === \"\") {\n          results.push(\"/\");\n        } else {\n          results.push(basePath);\n        }\n        const optionalSegment = segment.replace(\"?\", \"\");\n        basePath += \"/\" + optionalSegment;\n        results.push(basePath);\n      } else {\n        basePath += \"/\" + segment;\n      }\n    }\n  });\n  return results.filter((v, i, a) => a.indexOf(v) === i);\n};\nvar _decodeURI = (value) => {\n  if (!/[%+]/.test(value)) {\n    return value;\n  }\n  if (value.indexOf(\"+\") !== -1) {\n    value = value.replace(/\\+/g, \" \");\n  }\n  return value.indexOf(\"%\") !== -1 ? tryDecode(value, decodeURIComponent_) : value;\n};\nvar _getQueryParam = (url, key, multiple) => {\n  let encoded;\n  if (!multiple && key && !/[%+]/.test(key)) {\n    let keyIndex2 = url.indexOf(`?${key}`, 8);\n    if (keyIndex2 === -1) {\n      keyIndex2 = url.indexOf(`&${key}`, 8);\n    }\n    while (keyIndex2 !== -1) {\n      const trailingKeyCode = url.charCodeAt(keyIndex2 + key.length + 1);\n      if (trailingKeyCode === 61) {\n        const valueIndex = keyIndex2 + key.length + 2;\n        const endIndex = url.indexOf(\"&\", valueIndex);\n        return _decodeURI(url.slice(valueIndex, endIndex === -1 ? void 0 : endIndex));\n      } else if (trailingKeyCode == 38 || isNaN(trailingKeyCode)) {\n        return \"\";\n      }\n      keyIndex2 = url.indexOf(`&${key}`, keyIndex2 + 1);\n    }\n    encoded = /[%+]/.test(url);\n    if (!encoded) {\n      return void 0;\n    }\n  }\n  const results = {};\n  encoded ??= /[%+]/.test(url);\n  let keyIndex = url.indexOf(\"?\", 8);\n  while (keyIndex !== -1) {\n    const nextKeyIndex = url.indexOf(\"&\", keyIndex + 1);\n    let valueIndex = url.indexOf(\"=\", keyIndex);\n    if (valueIndex > nextKeyIndex && nextKeyIndex !== -1) {\n      valueIndex = -1;\n    }\n    let name = url.slice(\n      keyIndex + 1,\n      valueIndex === -1 ? nextKeyIndex === -1 ? void 0 : nextKeyIndex : valueIndex\n    );\n    if (encoded) {\n      name = _decodeURI(name);\n    }\n    keyIndex = nextKeyIndex;\n    if (name === \"\") {\n      continue;\n    }\n    let value;\n    if (valueIndex === -1) {\n      value = \"\";\n    } else {\n      value = url.slice(valueIndex + 1, nextKeyIndex === -1 ? void 0 : nextKeyIndex);\n      if (encoded) {\n        value = _decodeURI(value);\n      }\n    }\n    if (multiple) {\n      if (!(results[name] && Array.isArray(results[name]))) {\n        results[name] = [];\n      }\n      ;\n      results[name].push(value);\n    } else {\n      results[name] ??= value;\n    }\n  }\n  return key ? results[key] : results;\n};\nvar getQueryParam = _getQueryParam;\nvar getQueryParams = (url, key) => {\n  return _getQueryParam(url, key, true);\n};\nvar decodeURIComponent_ = decodeURIComponent;\nexport {\n  checkOptionalParameter,\n  decodeURIComponent_,\n  getPath,\n  getPathNoStrict,\n  getPattern,\n  getQueryParam,\n  getQueryParams,\n  getQueryStrings,\n  mergePath,\n  splitPath,\n  splitRoutingPath,\n  tryDecode\n};\n","// src/request.ts\nimport { GET_MATCH_RESULT } from \"./request/constants.js\";\nimport { parseBody } from \"./utils/body.js\";\nimport { decodeURIComponent_, getQueryParam, getQueryParams, tryDecode } from \"./utils/url.js\";\nvar tryDecodeURIComponent = (str) => tryDecode(str, decodeURIComponent_);\nvar HonoRequest = class {\n  raw;\n  #validatedData;\n  #matchResult;\n  routeIndex = 0;\n  path;\n  bodyCache = {};\n  constructor(request, path = \"/\", matchResult = [[]]) {\n    this.raw = request;\n    this.path = path;\n    this.#matchResult = matchResult;\n    this.#validatedData = {};\n  }\n  param(key) {\n    return key ? this.#getDecodedParam(key) : this.#getAllDecodedParams();\n  }\n  #getDecodedParam(key) {\n    const paramKey = this.#matchResult[0][this.routeIndex][1][key];\n    const param = this.#getParamValue(paramKey);\n    return param ? /\\%/.test(param) ? tryDecodeURIComponent(param) : param : void 0;\n  }\n  #getAllDecodedParams() {\n    const decoded = {};\n    const keys = Object.keys(this.#matchResult[0][this.routeIndex][1]);\n    for (const key of keys) {\n      const value = this.#getParamValue(this.#matchResult[0][this.routeIndex][1][key]);\n      if (value && typeof value === \"string\") {\n        decoded[key] = /\\%/.test(value) ? tryDecodeURIComponent(value) : value;\n      }\n    }\n    return decoded;\n  }\n  #getParamValue(paramKey) {\n    return this.#matchResult[1] ? this.#matchResult[1][paramKey] : paramKey;\n  }\n  query(key) {\n    return getQueryParam(this.url, key);\n  }\n  queries(key) {\n    return getQueryParams(this.url, key);\n  }\n  header(name) {\n    if (name) {\n      return this.raw.headers.get(name) ?? void 0;\n    }\n    const headerData = {};\n    this.raw.headers.forEach((value, key) => {\n      headerData[key] = value;\n    });\n    return headerData;\n  }\n  async parseBody(options) {\n    return this.bodyCache.parsedBody ??= await parseBody(this, options);\n  }\n  #cachedBody = (key) => {\n    const { bodyCache, raw } = this;\n    const cachedBody = bodyCache[key];\n    if (cachedBody) {\n      return cachedBody;\n    }\n    const anyCachedKey = Object.keys(bodyCache)[0];\n    if (anyCachedKey) {\n      return bodyCache[anyCachedKey].then((body) => {\n        if (anyCachedKey === \"json\") {\n          body = JSON.stringify(body);\n        }\n        return new Response(body)[key]();\n      });\n    }\n    return bodyCache[key] = raw[key]();\n  };\n  json() {\n    return this.#cachedBody(\"text\").then((text) => JSON.parse(text));\n  }\n  text() {\n    return this.#cachedBody(\"text\");\n  }\n  arrayBuffer() {\n    return this.#cachedBody(\"arrayBuffer\");\n  }\n  blob() {\n    return this.#cachedBody(\"blob\");\n  }\n  formData() {\n    return this.#cachedBody(\"formData\");\n  }\n  addValidatedData(target, data) {\n    this.#validatedData[target] = data;\n  }\n  valid(target) {\n    return this.#validatedData[target];\n  }\n  get url() {\n    return this.raw.url;\n  }\n  get method() {\n    return this.raw.method;\n  }\n  get [GET_MATCH_RESULT]() {\n    return this.#matchResult;\n  }\n  get matchedRoutes() {\n    return this.#matchResult[0].map(([[, route]]) => route);\n  }\n  get routePath() {\n    return this.#matchResult[0].map(([[, route]]) => route)[this.routeIndex].path;\n  }\n};\nexport {\n  HonoRequest\n};\n","// src/utils/html.ts\nvar HtmlEscapedCallbackPhase = {\n  Stringify: 1,\n  BeforeStream: 2,\n  Stream: 3\n};\nvar raw = (value, callbacks) => {\n  const escapedString = new String(value);\n  escapedString.isEscaped = true;\n  escapedString.callbacks = callbacks;\n  return escapedString;\n};\nvar escapeRe = /[&<>'\"]/;\nvar stringBufferToString = async (buffer, callbacks) => {\n  let str = \"\";\n  callbacks ||= [];\n  const resolvedBuffer = await Promise.all(buffer);\n  for (let i = resolvedBuffer.length - 1; ; i--) {\n    str += resolvedBuffer[i];\n    i--;\n    if (i < 0) {\n      break;\n    }\n    let r = resolvedBuffer[i];\n    if (typeof r === \"object\") {\n      callbacks.push(...r.callbacks || []);\n    }\n    const isEscaped = r.isEscaped;\n    r = await (typeof r === \"object\" ? r.toString() : r);\n    if (typeof r === \"object\") {\n      callbacks.push(...r.callbacks || []);\n    }\n    if (r.isEscaped ?? isEscaped) {\n      str += r;\n    } else {\n      const buf = [str];\n      escapeToBuffer(r, buf);\n      str = buf[0];\n    }\n  }\n  return raw(str, callbacks);\n};\nvar escapeToBuffer = (str, buffer) => {\n  const match = str.search(escapeRe);\n  if (match === -1) {\n    buffer[0] += str;\n    return;\n  }\n  let escape;\n  let index;\n  let lastIndex = 0;\n  for (index = match; index < str.length; index++) {\n    switch (str.charCodeAt(index)) {\n      case 34:\n        escape = \"&quot;\";\n        break;\n      case 39:\n        escape = \"&#39;\";\n        break;\n      case 38:\n        escape = \"&amp;\";\n        break;\n      case 60:\n        escape = \"&lt;\";\n        break;\n      case 62:\n        escape = \"&gt;\";\n        break;\n      default:\n        continue;\n    }\n    buffer[0] += str.substring(lastIndex, index) + escape;\n    lastIndex = index + 1;\n  }\n  buffer[0] += str.substring(lastIndex, index);\n};\nvar resolveCallbackSync = (str) => {\n  const callbacks = str.callbacks;\n  if (!callbacks?.length) {\n    return str;\n  }\n  const buffer = [str];\n  const context = {};\n  callbacks.forEach((c) => c({ phase: HtmlEscapedCallbackPhase.Stringify, buffer, context }));\n  return buffer[0];\n};\nvar resolveCallback = async (str, phase, preserveCallbacks, context, buffer) => {\n  if (typeof str === \"object\" && !(str instanceof String)) {\n    if (!(str instanceof Promise)) {\n      str = str.toString();\n    }\n    if (str instanceof Promise) {\n      str = await str;\n    }\n  }\n  const callbacks = str.callbacks;\n  if (!callbacks?.length) {\n    return Promise.resolve(str);\n  }\n  if (buffer) {\n    buffer[0] += str;\n  } else {\n    buffer = [str];\n  }\n  const resStr = Promise.all(callbacks.map((c) => c({ phase, buffer, context }))).then(\n    (res) => Promise.all(\n      res.filter(Boolean).map((str2) => resolveCallback(str2, phase, false, context, buffer))\n    ).then(() => buffer[0])\n  );\n  if (preserveCallbacks) {\n    return raw(await resStr, callbacks);\n  } else {\n    return resStr;\n  }\n};\nexport {\n  HtmlEscapedCallbackPhase,\n  escapeToBuffer,\n  raw,\n  resolveCallback,\n  resolveCallbackSync,\n  stringBufferToString\n};\n","// src/context.ts\nimport { HonoRequest } from \"./request.js\";\nimport { HtmlEscapedCallbackPhase, resolveCallback } from \"./utils/html.js\";\nvar TEXT_PLAIN = \"text/plain; charset=UTF-8\";\nvar setDefaultContentType = (contentType, headers) => {\n  return {\n    \"Content-Type\": contentType,\n    ...headers\n  };\n};\nvar Context = class {\n  #rawRequest;\n  #req;\n  env = {};\n  #var;\n  finalized = false;\n  error;\n  #status;\n  #executionCtx;\n  #res;\n  #layout;\n  #renderer;\n  #notFoundHandler;\n  #preparedHeaders;\n  #matchResult;\n  #path;\n  constructor(req, options) {\n    this.#rawRequest = req;\n    if (options) {\n      this.#executionCtx = options.executionCtx;\n      this.env = options.env;\n      this.#notFoundHandler = options.notFoundHandler;\n      this.#path = options.path;\n      this.#matchResult = options.matchResult;\n    }\n  }\n  get req() {\n    this.#req ??= new HonoRequest(this.#rawRequest, this.#path, this.#matchResult);\n    return this.#req;\n  }\n  get event() {\n    if (this.#executionCtx && \"respondWith\" in this.#executionCtx) {\n      return this.#executionCtx;\n    } else {\n      throw Error(\"This context has no FetchEvent\");\n    }\n  }\n  get executionCtx() {\n    if (this.#executionCtx) {\n      return this.#executionCtx;\n    } else {\n      throw Error(\"This context has no ExecutionContext\");\n    }\n  }\n  get res() {\n    return this.#res ||= new Response(null, {\n      headers: this.#preparedHeaders ??= new Headers()\n    });\n  }\n  set res(_res) {\n    if (this.#res && _res) {\n      _res = new Response(_res.body, _res);\n      for (const [k, v] of this.#res.headers.entries()) {\n        if (k === \"content-type\") {\n          continue;\n        }\n        if (k === \"set-cookie\") {\n          const cookies = this.#res.headers.getSetCookie();\n          _res.headers.delete(\"set-cookie\");\n          for (const cookie of cookies) {\n            _res.headers.append(\"set-cookie\", cookie);\n          }\n        } else {\n          _res.headers.set(k, v);\n        }\n      }\n    }\n    this.#res = _res;\n    this.finalized = true;\n  }\n  render = (...args) => {\n    this.#renderer ??= (content) => this.html(content);\n    return this.#renderer(...args);\n  };\n  setLayout = (layout) => this.#layout = layout;\n  getLayout = () => this.#layout;\n  setRenderer = (renderer) => {\n    this.#renderer = renderer;\n  };\n  header = (name, value, options) => {\n    if (this.finalized) {\n      this.#res = new Response(this.#res.body, this.#res);\n    }\n    const headers = this.#res ? this.#res.headers : this.#preparedHeaders ??= new Headers();\n    if (value === void 0) {\n      headers.delete(name);\n    } else if (options?.append) {\n      headers.append(name, value);\n    } else {\n      headers.set(name, value);\n    }\n  };\n  status = (status) => {\n    this.#status = status;\n  };\n  set = (key, value) => {\n    this.#var ??= /* @__PURE__ */ new Map();\n    this.#var.set(key, value);\n  };\n  get = (key) => {\n    return this.#var ? this.#var.get(key) : void 0;\n  };\n  get var() {\n    if (!this.#var) {\n      return {};\n    }\n    return Object.fromEntries(this.#var);\n  }\n  #newResponse(data, arg, headers) {\n    const responseHeaders = this.#res ? new Headers(this.#res.headers) : this.#preparedHeaders ?? new Headers();\n    if (typeof arg === \"object\" && \"headers\" in arg) {\n      const argHeaders = arg.headers instanceof Headers ? arg.headers : new Headers(arg.headers);\n      for (const [key, value] of argHeaders) {\n        if (key.toLowerCase() === \"set-cookie\") {\n          responseHeaders.append(key, value);\n        } else {\n          responseHeaders.set(key, value);\n        }\n      }\n    }\n    if (headers) {\n      for (const [k, v] of Object.entries(headers)) {\n        if (typeof v === \"string\") {\n          responseHeaders.set(k, v);\n        } else {\n          responseHeaders.delete(k);\n          for (const v2 of v) {\n            responseHeaders.append(k, v2);\n          }\n        }\n      }\n    }\n    const status = typeof arg === \"number\" ? arg : arg?.status ?? this.#status;\n    return new Response(data, { status, headers: responseHeaders });\n  }\n  newResponse = (...args) => this.#newResponse(...args);\n  body = (data, arg, headers) => this.#newResponse(data, arg, headers);\n  text = (text, arg, headers) => {\n    return !this.#preparedHeaders && !this.#status && !arg && !headers && !this.finalized ? new Response(text) : this.#newResponse(\n      text,\n      arg,\n      setDefaultContentType(TEXT_PLAIN, headers)\n    );\n  };\n  json = (object, arg, headers) => {\n    return this.#newResponse(\n      JSON.stringify(object),\n      arg,\n      setDefaultContentType(\"application/json\", headers)\n    );\n  };\n  html = (html, arg, headers) => {\n    const res = (html2) => this.#newResponse(html2, arg, setDefaultContentType(\"text/html; charset=UTF-8\", headers));\n    return typeof html === \"object\" ? resolveCallback(html, HtmlEscapedCallbackPhase.Stringify, false, {}).then(res) : res(html);\n  };\n  redirect = (location, status) => {\n    const locationString = String(location);\n    this.header(\n      \"Location\",\n      !/[^\\x00-\\xFF]/.test(locationString) ? locationString : encodeURI(locationString)\n    );\n    return this.newResponse(null, status ?? 302);\n  };\n  notFound = () => {\n    this.#notFoundHandler ??= () => new Response();\n    return this.#notFoundHandler(this);\n  };\n};\nexport {\n  Context,\n  TEXT_PLAIN\n};\n","// src/router.ts\nvar METHOD_NAME_ALL = \"ALL\";\nvar METHOD_NAME_ALL_LOWERCASE = \"all\";\nvar METHODS = [\"get\", \"post\", \"put\", \"delete\", \"options\", \"patch\"];\nvar MESSAGE_MATCHER_IS_ALREADY_BUILT = \"Can not add a route since the matcher is already built.\";\nvar UnsupportedPathError = class extends Error {\n};\nexport {\n  MESSAGE_MATCHER_IS_ALREADY_BUILT,\n  METHODS,\n  METHOD_NAME_ALL,\n  METHOD_NAME_ALL_LOWERCASE,\n  UnsupportedPathError\n};\n","// src/utils/constants.ts\nvar COMPOSED_HANDLER = \"__COMPOSED_HANDLER\";\nexport {\n  COMPOSED_HANDLER\n};\n","// src/hono-base.ts\nimport { compose } from \"./compose.js\";\nimport { Context } from \"./context.js\";\nimport { METHODS, METHOD_NAME_ALL, METHOD_NAME_ALL_LOWERCASE } from \"./router.js\";\nimport { COMPOSED_HANDLER } from \"./utils/constants.js\";\nimport { getPath, getPathNoStrict, mergePath } from \"./utils/url.js\";\nvar notFoundHandler = (c) => {\n  return c.text(\"404 Not Found\", 404);\n};\nvar errorHandler = (err, c) => {\n  if (\"getResponse\" in err) {\n    const res = err.getResponse();\n    return c.newResponse(res.body, res);\n  }\n  console.error(err);\n  return c.text(\"Internal Server Error\", 500);\n};\nvar Hono = class {\n  get;\n  post;\n  put;\n  delete;\n  options;\n  patch;\n  all;\n  on;\n  use;\n  router;\n  getPath;\n  _basePath = \"/\";\n  #path = \"/\";\n  routes = [];\n  constructor(options = {}) {\n    const allMethods = [...METHODS, METHOD_NAME_ALL_LOWERCASE];\n    allMethods.forEach((method) => {\n      this[method] = (args1, ...args) => {\n        if (typeof args1 === \"string\") {\n          this.#path = args1;\n        } else {\n          this.#addRoute(method, this.#path, args1);\n        }\n        args.forEach((handler) => {\n          this.#addRoute(method, this.#path, handler);\n        });\n        return this;\n      };\n    });\n    this.on = (method, path, ...handlers) => {\n      for (const p of [path].flat()) {\n        this.#path = p;\n        for (const m of [method].flat()) {\n          handlers.map((handler) => {\n            this.#addRoute(m.toUpperCase(), this.#path, handler);\n          });\n        }\n      }\n      return this;\n    };\n    this.use = (arg1, ...handlers) => {\n      if (typeof arg1 === \"string\") {\n        this.#path = arg1;\n      } else {\n        this.#path = \"*\";\n        handlers.unshift(arg1);\n      }\n      handlers.forEach((handler) => {\n        this.#addRoute(METHOD_NAME_ALL, this.#path, handler);\n      });\n      return this;\n    };\n    const { strict, ...optionsWithoutStrict } = options;\n    Object.assign(this, optionsWithoutStrict);\n    this.getPath = strict ?? true ? options.getPath ?? getPath : getPathNoStrict;\n  }\n  #clone() {\n    const clone = new Hono({\n      router: this.router,\n      getPath: this.getPath\n    });\n    clone.errorHandler = this.errorHandler;\n    clone.#notFoundHandler = this.#notFoundHandler;\n    clone.routes = this.routes;\n    return clone;\n  }\n  #notFoundHandler = notFoundHandler;\n  errorHandler = errorHandler;\n  route(path, app) {\n    const subApp = this.basePath(path);\n    app.routes.map((r) => {\n      let handler;\n      if (app.errorHandler === errorHandler) {\n        handler = r.handler;\n      } else {\n        handler = async (c, next) => (await compose([], app.errorHandler)(c, () => r.handler(c, next))).res;\n        handler[COMPOSED_HANDLER] = r.handler;\n      }\n      subApp.#addRoute(r.method, r.path, handler);\n    });\n    return this;\n  }\n  basePath(path) {\n    const subApp = this.#clone();\n    subApp._basePath = mergePath(this._basePath, path);\n    return subApp;\n  }\n  onError = (handler) => {\n    this.errorHandler = handler;\n    return this;\n  };\n  notFound = (handler) => {\n    this.#notFoundHandler = handler;\n    return this;\n  };\n  mount(path, applicationHandler, options) {\n    let replaceRequest;\n    let optionHandler;\n    if (options) {\n      if (typeof options === \"function\") {\n        optionHandler = options;\n      } else {\n        optionHandler = options.optionHandler;\n        if (options.replaceRequest === false) {\n          replaceRequest = (request) => request;\n        } else {\n          replaceRequest = options.replaceRequest;\n        }\n      }\n    }\n    const getOptions = optionHandler ? (c) => {\n      const options2 = optionHandler(c);\n      return Array.isArray(options2) ? options2 : [options2];\n    } : (c) => {\n      let executionContext = void 0;\n      try {\n        executionContext = c.executionCtx;\n      } catch {\n      }\n      return [c.env, executionContext];\n    };\n    replaceRequest ||= (() => {\n      const mergedPath = mergePath(this._basePath, path);\n      const pathPrefixLength = mergedPath === \"/\" ? 0 : mergedPath.length;\n      return (request) => {\n        const url = new URL(request.url);\n        url.pathname = url.pathname.slice(pathPrefixLength) || \"/\";\n        return new Request(url, request);\n      };\n    })();\n    const handler = async (c, next) => {\n      const res = await applicationHandler(replaceRequest(c.req.raw), ...getOptions(c));\n      if (res) {\n        return res;\n      }\n      await next();\n    };\n    this.#addRoute(METHOD_NAME_ALL, mergePath(path, \"*\"), handler);\n    return this;\n  }\n  #addRoute(method, path, handler) {\n    method = method.toUpperCase();\n    path = mergePath(this._basePath, path);\n    const r = { basePath: this._basePath, path, method, handler };\n    this.router.add(method, path, [handler, r]);\n    this.routes.push(r);\n  }\n  #handleError(err, c) {\n    if (err instanceof Error) {\n      return this.errorHandler(err, c);\n    }\n    throw err;\n  }\n  #dispatch(request, executionCtx, env, method) {\n    if (method === \"HEAD\") {\n      return (async () => new Response(null, await this.#dispatch(request, executionCtx, env, \"GET\")))();\n    }\n    const path = this.getPath(request, { env });\n    const matchResult = this.router.match(method, path);\n    const c = new Context(request, {\n      path,\n      matchResult,\n      env,\n      executionCtx,\n      notFoundHandler: this.#notFoundHandler\n    });\n    if (matchResult[0].length === 1) {\n      let res;\n      try {\n        res = matchResult[0][0][0][0](c, async () => {\n          c.res = await this.#notFoundHandler(c);\n        });\n      } catch (err) {\n        return this.#handleError(err, c);\n      }\n      return res instanceof Promise ? res.then(\n        (resolved) => resolved || (c.finalized ? c.res : this.#notFoundHandler(c))\n      ).catch((err) => this.#handleError(err, c)) : res ?? this.#notFoundHandler(c);\n    }\n    const composed = compose(matchResult[0], this.errorHandler, this.#notFoundHandler);\n    return (async () => {\n      try {\n        const context = await composed(c);\n        if (!context.finalized) {\n          throw new Error(\n            \"Context is not finalized. Did you forget to return a Response object or `await next()`?\"\n          );\n        }\n        return context.res;\n      } catch (err) {\n        return this.#handleError(err, c);\n      }\n    })();\n  }\n  fetch = (request, ...rest) => {\n    return this.#dispatch(request, rest[1], rest[0], request.method);\n  };\n  request = (input, requestInit, Env, executionCtx) => {\n    if (input instanceof Request) {\n      return this.fetch(requestInit ? new Request(input, requestInit) : input, Env, executionCtx);\n    }\n    input = input.toString();\n    return this.fetch(\n      new Request(\n        /^https?:\\/\\//.test(input) ? input : `http://localhost${mergePath(\"/\", input)}`,\n        requestInit\n      ),\n      Env,\n      executionCtx\n    );\n  };\n  fire = () => {\n    addEventListener(\"fetch\", (event) => {\n      event.respondWith(this.#dispatch(event.request, event, void 0, event.request.method));\n    });\n  };\n};\nexport {\n  Hono as HonoBase\n};\n","// src/router/reg-exp-router/node.ts\nvar LABEL_REG_EXP_STR = \"[^/]+\";\nvar ONLY_WILDCARD_REG_EXP_STR = \".*\";\nvar TAIL_WILDCARD_REG_EXP_STR = \"(?:|/.*)\";\nvar PATH_ERROR = Symbol();\nvar regExpMetaChars = new Set(\".\\\\+*[^]$()\");\nfunction compareKey(a, b) {\n  if (a.length === 1) {\n    return b.length === 1 ? a < b ? -1 : 1 : -1;\n  }\n  if (b.length === 1) {\n    return 1;\n  }\n  if (a === ONLY_WILDCARD_REG_EXP_STR || a === TAIL_WILDCARD_REG_EXP_STR) {\n    return 1;\n  } else if (b === ONLY_WILDCARD_REG_EXP_STR || b === TAIL_WILDCARD_REG_EXP_STR) {\n    return -1;\n  }\n  if (a === LABEL_REG_EXP_STR) {\n    return 1;\n  } else if (b === LABEL_REG_EXP_STR) {\n    return -1;\n  }\n  return a.length === b.length ? a < b ? -1 : 1 : b.length - a.length;\n}\nvar Node = class {\n  #index;\n  #varIndex;\n  #children = /* @__PURE__ */ Object.create(null);\n  insert(tokens, index, paramMap, context, pathErrorCheckOnly) {\n    if (tokens.length === 0) {\n      if (this.#index !== void 0) {\n        throw PATH_ERROR;\n      }\n      if (pathErrorCheckOnly) {\n        return;\n      }\n      this.#index = index;\n      return;\n    }\n    const [token, ...restTokens] = tokens;\n    const pattern = token === \"*\" ? restTokens.length === 0 ? [\"\", \"\", ONLY_WILDCARD_REG_EXP_STR] : [\"\", \"\", LABEL_REG_EXP_STR] : token === \"/*\" ? [\"\", \"\", TAIL_WILDCARD_REG_EXP_STR] : token.match(/^\\:([^\\{\\}]+)(?:\\{(.+)\\})?$/);\n    let node;\n    if (pattern) {\n      const name = pattern[1];\n      let regexpStr = pattern[2] || LABEL_REG_EXP_STR;\n      if (name && pattern[2]) {\n        if (regexpStr === \".*\") {\n          throw PATH_ERROR;\n        }\n        regexpStr = regexpStr.replace(/^\\((?!\\?:)(?=[^)]+\\)$)/, \"(?:\");\n        if (/\\((?!\\?:)/.test(regexpStr)) {\n          throw PATH_ERROR;\n        }\n      }\n      node = this.#children[regexpStr];\n      if (!node) {\n        if (Object.keys(this.#children).some(\n          (k) => k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR\n        )) {\n          throw PATH_ERROR;\n        }\n        if (pathErrorCheckOnly) {\n          return;\n        }\n        node = this.#children[regexpStr] = new Node();\n        if (name !== \"\") {\n          node.#varIndex = context.varIndex++;\n        }\n      }\n      if (!pathErrorCheckOnly && name !== \"\") {\n        paramMap.push([name, node.#varIndex]);\n      }\n    } else {\n      node = this.#children[token];\n      if (!node) {\n        if (Object.keys(this.#children).some(\n          (k) => k.length > 1 && k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR\n        )) {\n          throw PATH_ERROR;\n        }\n        if (pathErrorCheckOnly) {\n          return;\n        }\n        node = this.#children[token] = new Node();\n      }\n    }\n    node.insert(restTokens, index, paramMap, context, pathErrorCheckOnly);\n  }\n  buildRegExpStr() {\n    const childKeys = Object.keys(this.#children).sort(compareKey);\n    const strList = childKeys.map((k) => {\n      const c = this.#children[k];\n      return (typeof c.#varIndex === \"number\" ? `(${k})@${c.#varIndex}` : regExpMetaChars.has(k) ? `\\\\${k}` : k) + c.buildRegExpStr();\n    });\n    if (typeof this.#index === \"number\") {\n      strList.unshift(`#${this.#index}`);\n    }\n    if (strList.length === 0) {\n      return \"\";\n    }\n    if (strList.length === 1) {\n      return strList[0];\n    }\n    return \"(?:\" + strList.join(\"|\") + \")\";\n  }\n};\nexport {\n  Node,\n  PATH_ERROR\n};\n","// src/router/reg-exp-router/trie.ts\nimport { Node } from \"./node.js\";\nvar Trie = class {\n  #context = { varIndex: 0 };\n  #root = new Node();\n  insert(path, index, pathErrorCheckOnly) {\n    const paramAssoc = [];\n    const groups = [];\n    for (let i = 0; ; ) {\n      let replaced = false;\n      path = path.replace(/\\{[^}]+\\}/g, (m) => {\n        const mark = `@\\\\${i}`;\n        groups[i] = [mark, m];\n        i++;\n        replaced = true;\n        return mark;\n      });\n      if (!replaced) {\n        break;\n      }\n    }\n    const tokens = path.match(/(?::[^\\/]+)|(?:\\/\\*$)|./g) || [];\n    for (let i = groups.length - 1; i >= 0; i--) {\n      const [mark] = groups[i];\n      for (let j = tokens.length - 1; j >= 0; j--) {\n        if (tokens[j].indexOf(mark) !== -1) {\n          tokens[j] = tokens[j].replace(mark, groups[i][1]);\n          break;\n        }\n      }\n    }\n    this.#root.insert(tokens, index, paramAssoc, this.#context, pathErrorCheckOnly);\n    return paramAssoc;\n  }\n  buildRegExp() {\n    let regexp = this.#root.buildRegExpStr();\n    if (regexp === \"\") {\n      return [/^$/, [], []];\n    }\n    let captureIndex = 0;\n    const indexReplacementMap = [];\n    const paramReplacementMap = [];\n    regexp = regexp.replace(/#(\\d+)|@(\\d+)|\\.\\*\\$/g, (_, handlerIndex, paramIndex) => {\n      if (handlerIndex !== void 0) {\n        indexReplacementMap[++captureIndex] = Number(handlerIndex);\n        return \"$()\";\n      }\n      if (paramIndex !== void 0) {\n        paramReplacementMap[Number(paramIndex)] = ++captureIndex;\n        return \"\";\n      }\n      return \"\";\n    });\n    return [new RegExp(`^${regexp}`), indexReplacementMap, paramReplacementMap];\n  }\n};\nexport {\n  Trie\n};\n","// src/router/reg-exp-router/router.ts\nimport {\n  MESSAGE_MATCHER_IS_ALREADY_BUILT,\n  METHOD_NAME_ALL,\n  UnsupportedPathError\n} from \"../../router.js\";\nimport { checkOptionalParameter } from \"../../utils/url.js\";\nimport { PATH_ERROR } from \"./node.js\";\nimport { Trie } from \"./trie.js\";\nvar emptyParam = [];\nvar nullMatcher = [/^$/, [], /* @__PURE__ */ Object.create(null)];\nvar wildcardRegExpCache = /* @__PURE__ */ Object.create(null);\nfunction buildWildcardRegExp(path) {\n  return wildcardRegExpCache[path] ??= new RegExp(\n    path === \"*\" ? \"\" : `^${path.replace(\n      /\\/\\*$|([.\\\\+*[^\\]$()])/g,\n      (_, metaChar) => metaChar ? `\\\\${metaChar}` : \"(?:|/.*)\"\n    )}$`\n  );\n}\nfunction clearWildcardRegExpCache() {\n  wildcardRegExpCache = /* @__PURE__ */ Object.create(null);\n}\nfunction buildMatcherFromPreprocessedRoutes(routes) {\n  const trie = new Trie();\n  const handlerData = [];\n  if (routes.length === 0) {\n    return nullMatcher;\n  }\n  const routesWithStaticPathFlag = routes.map(\n    (route) => [!/\\*|\\/:/.test(route[0]), ...route]\n  ).sort(\n    ([isStaticA, pathA], [isStaticB, pathB]) => isStaticA ? 1 : isStaticB ? -1 : pathA.length - pathB.length\n  );\n  const staticMap = /* @__PURE__ */ Object.create(null);\n  for (let i = 0, j = -1, len = routesWithStaticPathFlag.length; i < len; i++) {\n    const [pathErrorCheckOnly, path, handlers] = routesWithStaticPathFlag[i];\n    if (pathErrorCheckOnly) {\n      staticMap[path] = [handlers.map(([h]) => [h, /* @__PURE__ */ Object.create(null)]), emptyParam];\n    } else {\n      j++;\n    }\n    let paramAssoc;\n    try {\n      paramAssoc = trie.insert(path, j, pathErrorCheckOnly);\n    } catch (e) {\n      throw e === PATH_ERROR ? new UnsupportedPathError(path) : e;\n    }\n    if (pathErrorCheckOnly) {\n      continue;\n    }\n    handlerData[j] = handlers.map(([h, paramCount]) => {\n      const paramIndexMap = /* @__PURE__ */ Object.create(null);\n      paramCount -= 1;\n      for (; paramCount >= 0; paramCount--) {\n        const [key, value] = paramAssoc[paramCount];\n        paramIndexMap[key] = value;\n      }\n      return [h, paramIndexMap];\n    });\n  }\n  const [regexp, indexReplacementMap, paramReplacementMap] = trie.buildRegExp();\n  for (let i = 0, len = handlerData.length; i < len; i++) {\n    for (let j = 0, len2 = handlerData[i].length; j < len2; j++) {\n      const map = handlerData[i][j]?.[1];\n      if (!map) {\n        continue;\n      }\n      const keys = Object.keys(map);\n      for (let k = 0, len3 = keys.length; k < len3; k++) {\n        map[keys[k]] = paramReplacementMap[map[keys[k]]];\n      }\n    }\n  }\n  const handlerMap = [];\n  for (const i in indexReplacementMap) {\n    handlerMap[i] = handlerData[indexReplacementMap[i]];\n  }\n  return [regexp, handlerMap, staticMap];\n}\nfunction findMiddleware(middleware, path) {\n  if (!middleware) {\n    return void 0;\n  }\n  for (const k of Object.keys(middleware).sort((a, b) => b.length - a.length)) {\n    if (buildWildcardRegExp(k).test(path)) {\n      return [...middleware[k]];\n    }\n  }\n  return void 0;\n}\nvar RegExpRouter = class {\n  name = \"RegExpRouter\";\n  #middleware;\n  #routes;\n  constructor() {\n    this.#middleware = { [METHOD_NAME_ALL]: /* @__PURE__ */ Object.create(null) };\n    this.#routes = { [METHOD_NAME_ALL]: /* @__PURE__ */ Object.create(null) };\n  }\n  add(method, path, handler) {\n    const middleware = this.#middleware;\n    const routes = this.#routes;\n    if (!middleware || !routes) {\n      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);\n    }\n    if (!middleware[method]) {\n      ;\n      [middleware, routes].forEach((handlerMap) => {\n        handlerMap[method] = /* @__PURE__ */ Object.create(null);\n        Object.keys(handlerMap[METHOD_NAME_ALL]).forEach((p) => {\n          handlerMap[method][p] = [...handlerMap[METHOD_NAME_ALL][p]];\n        });\n      });\n    }\n    if (path === \"/*\") {\n      path = \"*\";\n    }\n    const paramCount = (path.match(/\\/:/g) || []).length;\n    if (/\\*$/.test(path)) {\n      const re = buildWildcardRegExp(path);\n      if (method === METHOD_NAME_ALL) {\n        Object.keys(middleware).forEach((m) => {\n          middleware[m][path] ||= findMiddleware(middleware[m], path) || findMiddleware(middleware[METHOD_NAME_ALL], path) || [];\n        });\n      } else {\n        middleware[method][path] ||= findMiddleware(middleware[method], path) || findMiddleware(middleware[METHOD_NAME_ALL], path) || [];\n      }\n      Object.keys(middleware).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          Object.keys(middleware[m]).forEach((p) => {\n            re.test(p) && middleware[m][p].push([handler, paramCount]);\n          });\n        }\n      });\n      Object.keys(routes).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          Object.keys(routes[m]).forEach(\n            (p) => re.test(p) && routes[m][p].push([handler, paramCount])\n          );\n        }\n      });\n      return;\n    }\n    const paths = checkOptionalParameter(path) || [path];\n    for (let i = 0, len = paths.length; i < len; i++) {\n      const path2 = paths[i];\n      Object.keys(routes).forEach((m) => {\n        if (method === METHOD_NAME_ALL || method === m) {\n          routes[m][path2] ||= [\n            ...findMiddleware(middleware[m], path2) || findMiddleware(middleware[METHOD_NAME_ALL], path2) || []\n          ];\n          routes[m][path2].push([handler, paramCount - len + i + 1]);\n        }\n      });\n    }\n  }\n  match(method, path) {\n    clearWildcardRegExpCache();\n    const matchers = this.#buildAllMatchers();\n    this.match = (method2, path2) => {\n      const matcher = matchers[method2] || matchers[METHOD_NAME_ALL];\n      const staticMatch = matcher[2][path2];\n      if (staticMatch) {\n        return staticMatch;\n      }\n      const match = path2.match(matcher[0]);\n      if (!match) {\n        return [[], emptyParam];\n      }\n      const index = match.indexOf(\"\", 1);\n      return [matcher[1][index], match];\n    };\n    return this.match(method, path);\n  }\n  #buildAllMatchers() {\n    const matchers = /* @__PURE__ */ Object.create(null);\n    Object.keys(this.#routes).concat(Object.keys(this.#middleware)).forEach((method) => {\n      matchers[method] ||= this.#buildMatcher(method);\n    });\n    this.#middleware = this.#routes = void 0;\n    return matchers;\n  }\n  #buildMatcher(method) {\n    const routes = [];\n    let hasOwnRoute = method === METHOD_NAME_ALL;\n    [this.#middleware, this.#routes].forEach((r) => {\n      const ownRoute = r[method] ? Object.keys(r[method]).map((path) => [path, r[method][path]]) : [];\n      if (ownRoute.length !== 0) {\n        hasOwnRoute ||= true;\n        routes.push(...ownRoute);\n      } else if (method !== METHOD_NAME_ALL) {\n        routes.push(\n          ...Object.keys(r[METHOD_NAME_ALL]).map((path) => [path, r[METHOD_NAME_ALL][path]])\n        );\n      }\n    });\n    if (!hasOwnRoute) {\n      return null;\n    } else {\n      return buildMatcherFromPreprocessedRoutes(routes);\n    }\n  }\n};\nexport {\n  RegExpRouter\n};\n","// src/router/smart-router/router.ts\nimport { MESSAGE_MATCHER_IS_ALREADY_BUILT, UnsupportedPathError } from \"../../router.js\";\nvar SmartRouter = class {\n  name = \"SmartRouter\";\n  #routers = [];\n  #routes = [];\n  constructor(init) {\n    this.#routers = init.routers;\n  }\n  add(method, path, handler) {\n    if (!this.#routes) {\n      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);\n    }\n    this.#routes.push([method, path, handler]);\n  }\n  match(method, path) {\n    if (!this.#routes) {\n      throw new Error(\"Fatal error\");\n    }\n    const routers = this.#routers;\n    const routes = this.#routes;\n    const len = routers.length;\n    let i = 0;\n    let res;\n    for (; i < len; i++) {\n      const router = routers[i];\n      try {\n        for (let i2 = 0, len2 = routes.length; i2 < len2; i2++) {\n          router.add(...routes[i2]);\n        }\n        res = router.match(method, path);\n      } catch (e) {\n        if (e instanceof UnsupportedPathError) {\n          continue;\n        }\n        throw e;\n      }\n      this.match = router.match.bind(router);\n      this.#routers = [router];\n      this.#routes = void 0;\n      break;\n    }\n    if (i === len) {\n      throw new Error(\"Fatal error\");\n    }\n    this.name = `SmartRouter + ${this.activeRouter.name}`;\n    return res;\n  }\n  get activeRouter() {\n    if (this.#routes || this.#routers.length !== 1) {\n      throw new Error(\"No active router has been determined yet.\");\n    }\n    return this.#routers[0];\n  }\n};\nexport {\n  SmartRouter\n};\n","// src/router/trie-router/node.ts\nimport { METHOD_NAME_ALL } from \"../../router.js\";\nimport { getPattern, splitPath, splitRoutingPath } from \"../../utils/url.js\";\nvar emptyParams = /* @__PURE__ */ Object.create(null);\nvar Node = class {\n  #methods;\n  #children;\n  #patterns;\n  #order = 0;\n  #params = emptyParams;\n  constructor(method, handler, children) {\n    this.#children = children || /* @__PURE__ */ Object.create(null);\n    this.#methods = [];\n    if (method && handler) {\n      const m = /* @__PURE__ */ Object.create(null);\n      m[method] = { handler, possibleKeys: [], score: 0 };\n      this.#methods = [m];\n    }\n    this.#patterns = [];\n  }\n  insert(method, path, handler) {\n    this.#order = ++this.#order;\n    let curNode = this;\n    const parts = splitRoutingPath(path);\n    const possibleKeys = [];\n    for (let i = 0, len = parts.length; i < len; i++) {\n      const p = parts[i];\n      const nextP = parts[i + 1];\n      const pattern = getPattern(p, nextP);\n      const key = Array.isArray(pattern) ? pattern[0] : p;\n      if (key in curNode.#children) {\n        curNode = curNode.#children[key];\n        if (pattern) {\n          possibleKeys.push(pattern[1]);\n        }\n        continue;\n      }\n      curNode.#children[key] = new Node();\n      if (pattern) {\n        curNode.#patterns.push(pattern);\n        possibleKeys.push(pattern[1]);\n      }\n      curNode = curNode.#children[key];\n    }\n    curNode.#methods.push({\n      [method]: {\n        handler,\n        possibleKeys: possibleKeys.filter((v, i, a) => a.indexOf(v) === i),\n        score: this.#order\n      }\n    });\n    return curNode;\n  }\n  #getHandlerSets(node, method, nodeParams, params) {\n    const handlerSets = [];\n    for (let i = 0, len = node.#methods.length; i < len; i++) {\n      const m = node.#methods[i];\n      const handlerSet = m[method] || m[METHOD_NAME_ALL];\n      const processedSet = {};\n      if (handlerSet !== void 0) {\n        handlerSet.params = /* @__PURE__ */ Object.create(null);\n        handlerSets.push(handlerSet);\n        if (nodeParams !== emptyParams || params && params !== emptyParams) {\n          for (let i2 = 0, len2 = handlerSet.possibleKeys.length; i2 < len2; i2++) {\n            const key = handlerSet.possibleKeys[i2];\n            const processed = processedSet[handlerSet.score];\n            handlerSet.params[key] = params?.[key] && !processed ? params[key] : nodeParams[key] ?? params?.[key];\n            processedSet[handlerSet.score] = true;\n          }\n        }\n      }\n    }\n    return handlerSets;\n  }\n  search(method, path) {\n    const handlerSets = [];\n    this.#params = emptyParams;\n    const curNode = this;\n    let curNodes = [curNode];\n    const parts = splitPath(path);\n    const curNodesQueue = [];\n    for (let i = 0, len = parts.length; i < len; i++) {\n      const part = parts[i];\n      const isLast = i === len - 1;\n      const tempNodes = [];\n      for (let j = 0, len2 = curNodes.length; j < len2; j++) {\n        const node = curNodes[j];\n        const nextNode = node.#children[part];\n        if (nextNode) {\n          nextNode.#params = node.#params;\n          if (isLast) {\n            if (nextNode.#children[\"*\"]) {\n              handlerSets.push(\n                ...this.#getHandlerSets(nextNode.#children[\"*\"], method, node.#params)\n              );\n            }\n            handlerSets.push(...this.#getHandlerSets(nextNode, method, node.#params));\n          } else {\n            tempNodes.push(nextNode);\n          }\n        }\n        for (let k = 0, len3 = node.#patterns.length; k < len3; k++) {\n          const pattern = node.#patterns[k];\n          const params = node.#params === emptyParams ? {} : { ...node.#params };\n          if (pattern === \"*\") {\n            const astNode = node.#children[\"*\"];\n            if (astNode) {\n              handlerSets.push(...this.#getHandlerSets(astNode, method, node.#params));\n              astNode.#params = params;\n              tempNodes.push(astNode);\n            }\n            continue;\n          }\n          const [key, name, matcher] = pattern;\n          if (!part && !(matcher instanceof RegExp)) {\n            continue;\n          }\n          const child = node.#children[key];\n          const restPathString = parts.slice(i).join(\"/\");\n          if (matcher instanceof RegExp) {\n            const m = matcher.exec(restPathString);\n            if (m) {\n              params[name] = m[0];\n              handlerSets.push(...this.#getHandlerSets(child, method, node.#params, params));\n              if (Object.keys(child.#children).length) {\n                child.#params = params;\n                const componentCount = m[0].match(/\\//)?.length ?? 0;\n                const targetCurNodes = curNodesQueue[componentCount] ||= [];\n                targetCurNodes.push(child);\n              }\n              continue;\n            }\n          }\n          if (matcher === true || matcher.test(part)) {\n            params[name] = part;\n            if (isLast) {\n              handlerSets.push(...this.#getHandlerSets(child, method, params, node.#params));\n              if (child.#children[\"*\"]) {\n                handlerSets.push(\n                  ...this.#getHandlerSets(child.#children[\"*\"], method, params, node.#params)\n                );\n              }\n            } else {\n              child.#params = params;\n              tempNodes.push(child);\n            }\n          }\n        }\n      }\n      curNodes = tempNodes.concat(curNodesQueue.shift() ?? []);\n    }\n    if (handlerSets.length > 1) {\n      handlerSets.sort((a, b) => {\n        return a.score - b.score;\n      });\n    }\n    return [handlerSets.map(({ handler, params }) => [handler, params])];\n  }\n};\nexport {\n  Node\n};\n","// src/router/trie-router/router.ts\nimport { checkOptionalParameter } from \"../../utils/url.js\";\nimport { Node } from \"./node.js\";\nvar TrieRouter = class {\n  name = \"TrieRouter\";\n  #node;\n  constructor() {\n    this.#node = new Node();\n  }\n  add(method, path, handler) {\n    const results = checkOptionalParameter(path);\n    if (results) {\n      for (let i = 0, len = results.length; i < len; i++) {\n        this.#node.insert(method, results[i], handler);\n      }\n      return;\n    }\n    this.#node.insert(method, path, handler);\n  }\n  match(method, path) {\n    return this.#node.search(method, path);\n  }\n};\nexport {\n  TrieRouter\n};\n","// src/hono.ts\nimport { HonoBase } from \"./hono-base.js\";\nimport { RegExpRouter } from \"./router/reg-exp-router/index.js\";\nimport { SmartRouter } from \"./router/smart-router/index.js\";\nimport { TrieRouter } from \"./router/trie-router/index.js\";\nvar Hono = class extends HonoBase {\n  constructor(options = {}) {\n    super(options);\n    this.router = options.router ?? new SmartRouter({\n      routers: [new RegExpRouter(), new TrieRouter()]\n    });\n  }\n};\nexport {\n  Hono\n};\n","export var util;\n(function (util) {\n    util.assertEqual = (_) => { };\n    function assertIs(_arg) { }\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items) => {\n        const obj = {};\n        for (const item of items) {\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj) => {\n        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys) {\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj) => {\n        return util.objectKeys(obj).map(function (e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban\n        : (object) => {\n            const keys = [];\n            for (const key in object) {\n                if (Object.prototype.hasOwnProperty.call(object, key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        };\n    util.find = (arr, checker) => {\n        for (const item of arr) {\n            if (checker(item))\n                return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\"\n        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban\n        : (val) => typeof val === \"number\" && Number.isFinite(val) && Math.floor(val) === val;\n    function joinValues(array, separator = \" | \") {\n        return array.map((val) => (typeof val === \"string\" ? `'${val}'` : val)).join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value) => {\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nexport var objectUtil;\n(function (objectUtil) {\n    objectUtil.mergeShapes = (first, second) => {\n        return {\n            ...first,\n            ...second, // second overwrites first\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nexport const ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\",\n]);\nexport const getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return Number.isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"symbol\":\n            return ZodParsedType.symbol;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then && typeof data.then === \"function\" && data.catch && typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\n","import { util } from \"./helpers/util.js\";\nexport const ZodIssueCode = util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\",\n]);\nexport const quotelessJson = (obj) => {\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nexport class ZodError extends Error {\n    get errors() {\n        return this.issues;\n    }\n    constructor(issues) {\n        super();\n        this.issues = [];\n        this.addIssue = (sub) => {\n            this.issues = [...this.issues, sub];\n        };\n        this.addIssues = (subs = []) => {\n            this.issues = [...this.issues, ...subs];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        }\n        else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper ||\n            function (issue) {\n                return issue.message;\n            };\n        const fieldErrors = { _errors: [] };\n        const processError = (error) => {\n            for (const issue of error.issues) {\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                }\n                else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                }\n                else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                }\n                else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                }\n                else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while (i < issue.path.length) {\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || { _errors: [] };\n                            // if (typeof el === \"string\") {\n                            //   curr[el] = curr[el] || { _errors: [] };\n                            // } else if (typeof el === \"number\") {\n                            //   const errorArray: any = [];\n                            //   errorArray._errors = [];\n                            //   curr[el] = curr[el] || errorArray;\n                            // }\n                        }\n                        else {\n                            curr[el] = curr[el] || { _errors: [] };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    static assert(value) {\n        if (!(value instanceof ZodError)) {\n            throw new Error(`Not a ZodError: ${value}`);\n        }\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue) => issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues) {\n            if (sub.path.length > 0) {\n                const firstEl = sub.path[0];\n                fieldErrors[firstEl] = fieldErrors[firstEl] || [];\n                fieldErrors[firstEl].push(mapper(sub));\n            }\n            else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return { formErrors, fieldErrors };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nZodError.create = (issues) => {\n    const error = new ZodError(issues);\n    return error;\n};\n","import { ZodIssueCode } from \"../ZodError.js\";\nimport { util, ZodParsedType } from \"../helpers/util.js\";\nconst errorMap = (issue, _ctx) => {\n    let message;\n    switch (issue.code) {\n        case ZodIssueCode.invalid_type:\n            if (issue.received === ZodParsedType.undefined) {\n                message = \"Required\";\n            }\n            else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\n            break;\n        case ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\n            break;\n        case ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\n            break;\n        case ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                    if (typeof issue.validation.position === \"number\") {\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                    }\n                }\n                else if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                }\n                else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                }\n                else {\n                    util.assertNever(issue.validation);\n                }\n            }\n            else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            }\n            else {\n                message = \"Invalid\";\n            }\n            break;\n        case ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"bigint\")\n                message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\")\n                message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        case ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            util.assertNever(issue);\n    }\n    return { message };\n};\nexport default errorMap;\n","import defaultErrorMap from \"./locales/en.js\";\nlet overrideErrorMap = defaultErrorMap;\nexport { defaultErrorMap };\nexport function setErrorMap(map) {\n    overrideErrorMap = map;\n}\nexport function getErrorMap() {\n    return overrideErrorMap;\n}\n","import { getErrorMap } from \"../errors.js\";\nimport defaultErrorMap from \"../locales/en.js\";\nexport const makeIssue = (params) => {\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [...path, ...(issueData.path || [])];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath,\n    };\n    if (issueData.message !== undefined) {\n        return {\n            ...issueData,\n            path: fullPath,\n            message: issueData.message,\n        };\n    }\n    let errorMessage = \"\";\n    const maps = errorMaps\n        .filter((m) => !!m)\n        .slice()\n        .reverse();\n    for (const map of maps) {\n        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: errorMessage,\n    };\n};\nexport const EMPTY_PATH = [];\nexport function addIssueToContext(ctx, issueData) {\n    const overrideMap = getErrorMap();\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap, // contextual error map is first priority\n            ctx.schemaErrorMap, // then schema-bound map if available\n            overrideMap, // then global override map\n            overrideMap === defaultErrorMap ? undefined : defaultErrorMap, // then global default map\n        ].filter((x) => !!x),\n    });\n    ctx.common.issues.push(issue);\n}\nexport class ParseStatus {\n    constructor() {\n        this.value = \"valid\";\n    }\n    dirty() {\n        if (this.value === \"valid\")\n            this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\")\n            this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results) {\n            if (s.status === \"aborted\")\n                return INVALID;\n            if (s.status === \"dirty\")\n                status.dirty();\n            arrayValue.push(s.value);\n        }\n        return { status: status.value, value: arrayValue };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs) {\n            const key = await pair.key;\n            const value = await pair.value;\n            syncPairs.push({\n                key,\n                value,\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs) {\n            const { key, value } = pair;\n            if (key.status === \"aborted\")\n                return INVALID;\n            if (value.status === \"aborted\")\n                return INVALID;\n            if (key.status === \"dirty\")\n                status.dirty();\n            if (value.status === \"dirty\")\n                status.dirty();\n            if (key.value !== \"__proto__\" && (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return { status: status.value, value: finalObject };\n    }\n}\nexport const INVALID = Object.freeze({\n    status: \"aborted\",\n});\nexport const DIRTY = (value) => ({ status: \"dirty\", value });\nexport const OK = (value) => ({ status: \"valid\", value });\nexport const isAborted = (x) => x.status === \"aborted\";\nexport const isDirty = (x) => x.status === \"dirty\";\nexport const isValid = (x) => x.status === \"valid\";\nexport const isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\n","export var errorUtil;\n(function (errorUtil) {\n    errorUtil.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n    // biome-ignore lint:\n    errorUtil.toString = (message) => typeof message === \"string\" ? message : message?.message;\n})(errorUtil || (errorUtil = {}));\n","import { ZodError, ZodIssueCode, } from \"./ZodError.js\";\nimport { defaultErrorMap, getErrorMap } from \"./errors.js\";\nimport { errorUtil } from \"./helpers/errorUtil.js\";\nimport { DIRTY, INVALID, OK, ParseStatus, addIssueToContext, isAborted, isAsync, isDirty, isValid, makeIssue, } from \"./helpers/parseUtil.js\";\nimport { util, ZodParsedType, getParsedType } from \"./helpers/util.js\";\nclass ParseInputLazyPath {\n    constructor(parent, value, path, key) {\n        this._cachedPath = [];\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n    get path() {\n        if (!this._cachedPath.length) {\n            if (Array.isArray(this._key)) {\n                this._cachedPath.push(...this._path, ...this._key);\n            }\n            else {\n                this._cachedPath.push(...this._path, this._key);\n            }\n        }\n        return this._cachedPath;\n    }\n}\nconst handleResult = (ctx, result) => {\n    if (isValid(result)) {\n        return { success: true, data: result.value };\n    }\n    else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        return {\n            success: false,\n            get error() {\n                if (this._error)\n                    return this._error;\n                const error = new ZodError(ctx.common.issues);\n                this._error = error;\n                return this._error;\n            },\n        };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params)\n        return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap)\n        return { errorMap: errorMap, description };\n    const customMap = (iss, ctx) => {\n        const { message } = params;\n        if (iss.code === \"invalid_enum_value\") {\n            return { message: message ?? ctx.defaultError };\n        }\n        if (typeof ctx.data === \"undefined\") {\n            return { message: message ?? required_error ?? ctx.defaultError };\n        }\n        if (iss.code !== \"invalid_type\")\n            return { message: ctx.defaultError };\n        return { message: message ?? invalid_type_error ?? ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\nexport class ZodType {\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return getParsedType(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return (ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: getParsedType(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent,\n        });\n    }\n    _processInputParams(input) {\n        return {\n            status: new ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: getParsedType(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent,\n            },\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if (isAsync(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                async: params?.async ?? false,\n                contextualErrorMap: params?.errorMap,\n            },\n            path: params?.path || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n        return handleResult(ctx, result);\n    }\n    \"~validate\"(data) {\n        const ctx = {\n            common: {\n                issues: [],\n                async: !!this[\"~standard\"].async,\n            },\n            path: [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        if (!this[\"~standard\"].async) {\n            try {\n                const result = this._parseSync({ data, path: [], parent: ctx });\n                return isValid(result)\n                    ? {\n                        value: result.value,\n                    }\n                    : {\n                        issues: ctx.common.issues,\n                    };\n            }\n            catch (err) {\n                if (err?.message?.toLowerCase()?.includes(\"encountered\")) {\n                    this[\"~standard\"].async = true;\n                }\n                ctx.common = {\n                    issues: [],\n                    async: true,\n                };\n            }\n        }\n        return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid(result)\n            ? {\n                value: result.value,\n            }\n            : {\n                issues: ctx.common.issues,\n            });\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params?.errorMap,\n                async: true,\n            },\n            path: params?.path || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\n        const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val) => {\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return { message };\n            }\n            else if (typeof message === \"function\") {\n                return message(val);\n            }\n            else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx) => {\n            const result = check(val);\n            const setError = () => ctx.addIssue({\n                code: ZodIssueCode.custom,\n                ...getIssueProperties(val),\n            });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data) => {\n                    if (!data) {\n                        setError();\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx) => {\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\" ? refinementData(val, ctx) : refinementData);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"refinement\", refinement },\n        });\n    }\n    superRefine(refinement) {\n        return this._refinement(refinement);\n    }\n    constructor(def) {\n        /** Alias of safeParseAsync */\n        this.spa = this.safeParseAsync;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.brand = this.brand.bind(this);\n        this.default = this.default.bind(this);\n        this.catch = this.catch.bind(this);\n        this.describe = this.describe.bind(this);\n        this.pipe = this.pipe.bind(this);\n        this.readonly = this.readonly.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n        this[\"~standard\"] = {\n            version: 1,\n            vendor: \"zod\",\n            validate: (data) => this[\"~validate\"](data),\n        };\n    }\n    optional() {\n        return ZodOptional.create(this, this._def);\n    }\n    nullable() {\n        return ZodNullable.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return ZodArray.create(this);\n    }\n    promise() {\n        return ZodPromise.create(this, this._def);\n    }\n    or(option) {\n        return ZodUnion.create([this, option], this._def);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming, this._def);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"transform\", transform },\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault,\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def),\n        });\n    }\n    catch(def) {\n        const catchValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch,\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description,\n        });\n    }\n    pipe(target) {\n        return ZodPipeline.create(this, target);\n    }\n    readonly() {\n        return ZodReadonly.create(this);\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[0-9a-z]+$/;\nconst ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;\n// const uuidRegex =\n//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\nconst uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\nconst nanoidRegex = /^[a-z0-9_-]{21}$/i;\nconst jwtRegex = /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/;\nconst durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n//old email regex\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\n// eslint-disable-next-line\n// const emailRegex =\n//   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\n// const emailRegex =\n//   /^[a-zA-Z0-9\\.\\!\\#\\$\\%\\&\\'\\*\\+\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n// const emailRegex =\n//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i;\nconst emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\n// const emailRegex =\n//   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\\.[a-z0-9\\-]+)*$/i;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst _emojiRegex = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\nlet emojiRegex;\n// faster, simpler, safer\nconst ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;\nconst ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/;\n// const ipv6Regex =\n// /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\nconst ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;\nconst ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;\n// https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript\nconst base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n// https://base64.guru/standards/base64url\nconst base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;\n// simple\n// const dateRegexSource = `\\\\d{4}-\\\\d{2}-\\\\d{2}`;\n// no leap year validation\n// const dateRegexSource = `\\\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\\\d|2\\\\d))`;\n// with leap year validation\nconst dateRegexSource = `((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))`;\nconst dateRegex = new RegExp(`^${dateRegexSource}$`);\nfunction timeRegexSource(args) {\n    let secondsRegexSource = `[0-5]\\\\d`;\n    if (args.precision) {\n        secondsRegexSource = `${secondsRegexSource}\\\\.\\\\d{${args.precision}}`;\n    }\n    else if (args.precision == null) {\n        secondsRegexSource = `${secondsRegexSource}(\\\\.\\\\d+)?`;\n    }\n    const secondsQuantifier = args.precision ? \"+\" : \"?\"; // require seconds if precision is nonzero\n    return `([01]\\\\d|2[0-3]):[0-5]\\\\d(:${secondsRegexSource})${secondsQuantifier}`;\n}\nfunction timeRegex(args) {\n    return new RegExp(`^${timeRegexSource(args)}$`);\n}\n// Adapted from https://stackoverflow.com/a/3143231\nexport function datetimeRegex(args) {\n    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;\n    const opts = [];\n    opts.push(args.local ? `Z?` : `Z`);\n    if (args.offset)\n        opts.push(`([+-]\\\\d{2}:?\\\\d{2})`);\n    regex = `${regex}(${opts.join(\"|\")})`;\n    return new RegExp(`^${regex}$`);\n}\nfunction isValidIP(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nfunction isValidJWT(jwt, alg) {\n    if (!jwtRegex.test(jwt))\n        return false;\n    try {\n        const [header] = jwt.split(\".\");\n        if (!header)\n            return false;\n        // Convert base64url to base64\n        const base64 = header\n            .replace(/-/g, \"+\")\n            .replace(/_/g, \"/\")\n            .padEnd(header.length + ((4 - (header.length % 4)) % 4), \"=\");\n        const decoded = JSON.parse(atob(base64));\n        if (typeof decoded !== \"object\" || decoded === null)\n            return false;\n        if (\"typ\" in decoded && decoded?.typ !== \"JWT\")\n            return false;\n        if (!decoded.alg)\n            return false;\n        if (alg && decoded.alg !== alg)\n            return false;\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nfunction isValidCidr(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4CidrRegex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6CidrRegex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nexport class ZodString extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = String(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.string,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"length\") {\n                const tooBig = input.data.length > check.value;\n                const tooSmall = input.data.length < check.value;\n                if (tooBig || tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    if (tooBig) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_big,\n                            maximum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    else if (tooSmall) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_small,\n                            minimum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"email\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"emoji\") {\n                if (!emojiRegex) {\n                    emojiRegex = new RegExp(_emojiRegex, \"u\");\n                }\n                if (!emojiRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"emoji\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"uuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"nanoid\") {\n                if (!nanoidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"nanoid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid2\") {\n                if (!cuid2Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid2\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ulid\") {\n                if (!ulidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ulid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                }\n                catch {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"regex\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            }\n            else if (check.kind === \"includes\") {\n                if (!input.data.includes(check.value, check.position)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { includes: check.value, position: check.position },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"toLowerCase\") {\n                input.data = input.data.toLowerCase();\n            }\n            else if (check.kind === \"toUpperCase\") {\n                input.data = input.data.toUpperCase();\n            }\n            else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { startsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { endsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"datetime\") {\n                const regex = datetimeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"datetime\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"date\") {\n                const regex = dateRegex;\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"date\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"time\") {\n                const regex = timeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"time\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"duration\") {\n                if (!durationRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"duration\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ip\") {\n                if (!isValidIP(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ip\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"jwt\") {\n                if (!isValidJWT(input.data, check.alg)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"jwt\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cidr\") {\n                if (!isValidCidr(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cidr\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64\") {\n                if (!base64Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64url\") {\n                if (!base64urlRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _regex(regex, validation, message) {\n        return this.refinement((data) => regex.test(data), {\n            validation,\n            code: ZodIssueCode.invalid_string,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    email(message) {\n        return this._addCheck({ kind: \"email\", ...errorUtil.errToObj(message) });\n    }\n    url(message) {\n        return this._addCheck({ kind: \"url\", ...errorUtil.errToObj(message) });\n    }\n    emoji(message) {\n        return this._addCheck({ kind: \"emoji\", ...errorUtil.errToObj(message) });\n    }\n    uuid(message) {\n        return this._addCheck({ kind: \"uuid\", ...errorUtil.errToObj(message) });\n    }\n    nanoid(message) {\n        return this._addCheck({ kind: \"nanoid\", ...errorUtil.errToObj(message) });\n    }\n    cuid(message) {\n        return this._addCheck({ kind: \"cuid\", ...errorUtil.errToObj(message) });\n    }\n    cuid2(message) {\n        return this._addCheck({ kind: \"cuid2\", ...errorUtil.errToObj(message) });\n    }\n    ulid(message) {\n        return this._addCheck({ kind: \"ulid\", ...errorUtil.errToObj(message) });\n    }\n    base64(message) {\n        return this._addCheck({ kind: \"base64\", ...errorUtil.errToObj(message) });\n    }\n    base64url(message) {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return this._addCheck({\n            kind: \"base64url\",\n            ...errorUtil.errToObj(message),\n        });\n    }\n    jwt(options) {\n        return this._addCheck({ kind: \"jwt\", ...errorUtil.errToObj(options) });\n    }\n    ip(options) {\n        return this._addCheck({ kind: \"ip\", ...errorUtil.errToObj(options) });\n    }\n    cidr(options) {\n        return this._addCheck({ kind: \"cidr\", ...errorUtil.errToObj(options) });\n    }\n    datetime(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"datetime\",\n                precision: null,\n                offset: false,\n                local: false,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof options?.precision === \"undefined\" ? null : options?.precision,\n            offset: options?.offset ?? false,\n            local: options?.local ?? false,\n            ...errorUtil.errToObj(options?.message),\n        });\n    }\n    date(message) {\n        return this._addCheck({ kind: \"date\", message });\n    }\n    time(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"time\",\n                precision: null,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"time\",\n            precision: typeof options?.precision === \"undefined\" ? null : options?.precision,\n            ...errorUtil.errToObj(options?.message),\n        });\n    }\n    duration(message) {\n        return this._addCheck({ kind: \"duration\", ...errorUtil.errToObj(message) });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    includes(value, options) {\n        return this._addCheck({\n            kind: \"includes\",\n            value: value,\n            position: options?.position,\n            ...errorUtil.errToObj(options?.message),\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    length(len, message) {\n        return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    /**\n     * Equivalent to `.min(1)`\n     */\n    nonempty(message) {\n        return this.min(1, errorUtil.errToObj(message));\n    }\n    trim() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"trim\" }],\n        });\n    }\n    toLowerCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toLowerCase\" }],\n        });\n    }\n    toUpperCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toUpperCase\" }],\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n    }\n    get isDate() {\n        return !!this._def.checks.find((ch) => ch.kind === \"date\");\n    }\n    get isTime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"time\");\n    }\n    get isDuration() {\n        return !!this._def.checks.find((ch) => ch.kind === \"duration\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch) => ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch) => ch.kind === \"url\");\n    }\n    get isEmoji() {\n        return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n    }\n    get isNANOID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"nanoid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n    }\n    get isULID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n    }\n    get isIP() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n    }\n    get isCIDR() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cidr\");\n    }\n    get isBase64() {\n        return !!this._def.checks.find((ch) => ch.kind === \"base64\");\n    }\n    get isBase64url() {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return !!this._def.checks.find((ch) => ch.kind === \"base64url\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params) => {\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        coerce: params?.coerce ?? false,\n        ...processCreateParams(params),\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = Number.parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = Number.parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / 10 ** decCount;\n}\nexport class ZodNumber extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Number(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.number,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"int\") {\n                if (!util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"finite\") {\n                if (!Number.isFinite(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_finite,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: errorUtil.toString(message),\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: errorUtil.toString(message),\n        });\n    }\n    finite(message) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: errorUtil.toString(message),\n        });\n    }\n    safe(message) {\n        return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch) => ch.kind === \"int\" || (ch.kind === \"multipleOf\" && util.isInteger(ch.value)));\n    }\n    get isFinite() {\n        let max = null;\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"finite\" || ch.kind === \"int\" || ch.kind === \"multipleOf\") {\n                return true;\n            }\n            else if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n            else if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return Number.isFinite(min) && Number.isFinite(max);\n    }\n}\nZodNumber.create = (params) => {\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        coerce: params?.coerce || false,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodBigInt extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            try {\n                input.data = BigInt(input.data);\n            }\n            catch {\n                return this._getInvalidInput(input);\n            }\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.bigint) {\n            return this._getInvalidInput(input);\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        type: \"bigint\",\n                        minimum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        type: \"bigint\",\n                        maximum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (input.data % check.value !== BigInt(0)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _getInvalidInput(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.bigint,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodBigInt.create = (params) => {\n    return new ZodBigInt({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        coerce: params?.coerce ?? false,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodBoolean extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Boolean(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.boolean,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodBoolean.create = (params) => {\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        coerce: params?.coerce || false,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodDate extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = new Date(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.date,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (Number.isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_date,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        minimum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        maximum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime()),\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params) => {\n    return new ZodDate({\n        checks: [],\n        coerce: params?.coerce || false,\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodSymbol extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.symbol,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodSymbol.create = (params) => {\n    return new ZodSymbol({\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.undefined,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodUndefined.create = (params) => {\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.null,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodNull.create = (params) => {\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodAny extends ZodType {\n    constructor() {\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodAny.create = (params) => {\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodUnknown extends ZodType {\n    constructor() {\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodUnknown.create = (params) => {\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.never,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n}\nZodNever.create = (params) => {\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.void,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodVoid.create = (params) => {\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n                addIssueToContext(ctx, {\n                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n                    minimum: (tooSmall ? def.exactLength.value : undefined),\n                    maximum: (tooBig ? def.exactLength.value : undefined),\n                    type: \"array\",\n                    inclusive: true,\n                    exact: true,\n                    message: def.exactLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all([...ctx.data].map((item, i) => {\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result) => {\n                return ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = [...ctx.data].map((item, i) => {\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: { value: minLength, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: { value: maxLength, message: errorUtil.toString(message) },\n        });\n    }\n    length(len, message) {\n        return new ZodArray({\n            ...this._def,\n            exactLength: { value: len, message: errorUtil.toString(message) },\n        });\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params) => {\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params),\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for (const key in schema.shape) {\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: () => newShape,\n        });\n    }\n    else if (schema instanceof ZodArray) {\n        return new ZodArray({\n            ...schema._def,\n            type: deepPartialify(schema.element),\n        });\n    }\n    else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n    }\n    else {\n        return schema;\n    }\n}\nexport class ZodObject extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */\n        this.nonstrict = this.passthrough;\n        // extend<\n        //   Augmentation extends ZodRawShape,\n        //   NewOutput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   }>,\n        //   NewInput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }>\n        // >(\n        //   augmentation: Augmentation\n        // ): ZodObject<\n        //   extendShape<T, Augmentation>,\n        //   UnknownKeys,\n        //   Catchall,\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   return new ZodObject({\n        //     ...this._def,\n        //     shape: () => ({\n        //       ...this._def.shape(),\n        //       ...augmentation,\n        //     }),\n        //   }) as any;\n        // }\n        /**\n         * @deprecated Use `.extend` instead\n         *  */\n        this.augment = this.extend;\n    }\n    _getCached() {\n        if (this._cached !== null)\n            return this._cached;\n        const shape = this._def.shape();\n        const keys = util.objectKeys(shape);\n        this._cached = { shape, keys };\n        return this._cached;\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === \"strip\")) {\n            for (const key in ctx.data) {\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys) {\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: { status: \"valid\", value: key },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys) {\n                    pairs.push({\n                        key: { status: \"valid\", value: key },\n                        value: { status: \"valid\", value: ctx.data[key] },\n                    });\n                }\n            }\n            else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (unknownKeys === \"strip\") {\n            }\n            else {\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n        }\n        else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys) {\n                const value = ctx.data[key];\n                pairs.push({\n                    key: { status: \"valid\", value: key },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data,\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve()\n                .then(async () => {\n                const syncPairs = [];\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    syncPairs.push({\n                        key,\n                        value,\n                        alwaysSet: pair.alwaysSet,\n                    });\n                }\n                return syncPairs;\n            })\n                .then((syncPairs) => {\n                return ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...(message !== undefined\n                ? {\n                    errorMap: (issue, ctx) => {\n                        const defaultError = this._def.errorMap?.(issue, ctx).message ?? ctx.defaultError;\n                        if (issue.code === \"unrecognized_keys\")\n                            return {\n                                message: errorUtil.errToObj(message).message ?? defaultError,\n                            };\n                        return {\n                            message: defaultError,\n                        };\n                    },\n                }\n                : {}),\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\",\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\",\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(augmentation) {\n        return new ZodObject({\n            ...this._def,\n            shape: () => ({\n                ...this._def.shape(),\n                ...augmentation,\n            }),\n        });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */\n    merge(merging) {\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: () => ({\n                ...this._def.shape(),\n                ...merging._def.shape(),\n            }),\n            typeName: ZodFirstPartyTypeKind.ZodObject,\n        });\n        return merged;\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(key, schema) {\n        return this.augment({ [key]: schema });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index,\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        for (const key of util.objectKeys(mask)) {\n            if (mask[key] && this.shape[key]) {\n                shape[key] = this.shape[key];\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        for (const key of util.objectKeys(this.shape)) {\n            if (!mask[key]) {\n                shape[key] = this.shape[key];\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    /**\n     * @deprecated\n     */\n    deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        for (const key of util.objectKeys(this.shape)) {\n            const fieldSchema = this.shape[key];\n            if (mask && !mask[key]) {\n                newShape[key] = fieldSchema;\n            }\n            else {\n                newShape[key] = fieldSchema.optional();\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    required(mask) {\n        const newShape = {};\n        for (const key of util.objectKeys(this.shape)) {\n            if (mask && !mask[key]) {\n                newShape[key] = this.shape[key];\n            }\n            else {\n                const fieldSchema = this.shape[key];\n                let newField = fieldSchema;\n                while (newField instanceof ZodOptional) {\n                    newField = newField._def.innerType;\n                }\n                newShape[key] = newField;\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    keyof() {\n        return createZodEnum(util.objectKeys(this.shape));\n    }\n}\nZodObject.create = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.strictCreate = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.lazycreate = (shape, params) => {\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results) {\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results) {\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option) => {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx,\n                    }),\n                    ctx: childCtx,\n                };\n            })).then(handleResults);\n        }\n        else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options) {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx,\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                }\n                else if (result.status === \"dirty\" && !dirty) {\n                    dirty = { result, ctx: childCtx };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues) => new ZodError(issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params) => {\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params),\n    });\n};\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n//////////                                 //////////\n//////////      ZodDiscriminatedUnion      //////////\n//////////                                 //////////\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\nconst getDiscriminator = (type) => {\n    if (type instanceof ZodLazy) {\n        return getDiscriminator(type.schema);\n    }\n    else if (type instanceof ZodEffects) {\n        return getDiscriminator(type.innerType());\n    }\n    else if (type instanceof ZodLiteral) {\n        return [type.value];\n    }\n    else if (type instanceof ZodEnum) {\n        return type.options;\n    }\n    else if (type instanceof ZodNativeEnum) {\n        // eslint-disable-next-line ban/ban\n        return util.objectValues(type.enum);\n    }\n    else if (type instanceof ZodDefault) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else if (type instanceof ZodUndefined) {\n        return [undefined];\n    }\n    else if (type instanceof ZodNull) {\n        return [null];\n    }\n    else if (type instanceof ZodOptional) {\n        return [undefined, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodNullable) {\n        return [null, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodBranded) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodReadonly) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodCatch) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else {\n        return [];\n    }\n};\nexport class ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.optionsMap.get(discriminatorValue);\n        if (!option) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union_discriminator,\n                options: Array.from(this.optionsMap.keys()),\n                path: [discriminator],\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n        else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */\n    static create(discriminator, options, params) {\n        // Get all the valid discriminator values\n        const optionsMap = new Map();\n        // try {\n        for (const type of options) {\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues.length) {\n                throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n            }\n            for (const value of discriminatorValues) {\n                if (optionsMap.has(value)) {\n                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n                }\n                optionsMap.set(value, type);\n            }\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params),\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = getParsedType(a);\n    const bType = getParsedType(b);\n    if (a === b) {\n        return { valid: true, data: a };\n    }\n    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n        const bKeys = util.objectKeys(b);\n        const sharedKeys = util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);\n        const newObj = { ...a, ...b };\n        for (const key of sharedKeys) {\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return { valid: true, data: newObj };\n    }\n    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return { valid: false };\n        }\n        const newArray = [];\n        for (let index = 0; index < a.length; index++) {\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return { valid: true, data: newArray };\n    }\n    else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) {\n        return { valid: true, data: a };\n    }\n    else {\n        return { valid: false };\n    }\n}\nexport class ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight) => {\n            if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n                return INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.invalid_intersection_types,\n                });\n                return INVALID;\n            }\n            if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n                status.dirty();\n            }\n            return { status: status.value, value: merged.data };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n            ]).then(([left, right]) => handleParsed(left, right));\n        }\n        else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params) => {\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params),\n    });\n};\n// type ZodTupleItems = [ZodTypeAny, ...ZodTypeAny[]];\nexport class ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            return INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            status.dirty();\n        }\n        const items = [...ctx.data]\n            .map((item, itemIndex) => {\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema)\n                return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        })\n            .filter((x) => !!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results) => {\n                return ParseStatus.mergeArray(status, results);\n            });\n        }\n        else {\n            return ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest,\n        });\n    }\n}\nZodTuple.create = (schemas, params) => {\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for (const key in ctx.data) {\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (ctx.common.async) {\n            return ParseStatus.mergeObjectAsync(status, pairs);\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third),\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second),\n        });\n    }\n}\nexport class ZodMap extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.map) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.map,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"])),\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async () => {\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return { status: status.value, value: finalMap };\n            });\n        }\n        else {\n            const finalMap = new Map();\n            for (const pair of pairs) {\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return { status: status.value, value: finalMap };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params) => {\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.set) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.set,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minSize.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxSize.message,\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements) {\n                if (element.status === \"aborted\")\n                    return INVALID;\n                if (element.status === \"dirty\")\n                    status.dirty();\n                parsedSet.add(element.value);\n            }\n            return { status: status.value, value: parsedSet };\n        }\n        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements) => finalizeSet(elements));\n        }\n        else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: { value: minSize, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: { value: maxSize, message: errorUtil.toString(message) },\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params) => {\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodFunction extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.validate = this.implement;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.function) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.function,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return makeIssue({\n                data: args,\n                path: ctx.path,\n                errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap(), defaultErrorMap].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_arguments,\n                    argumentsError: error,\n                },\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return makeIssue({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap(), defaultErrorMap].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_return_type,\n                    returnTypeError: error,\n                },\n            });\n        }\n        const params = { errorMap: ctx.common.contextualErrorMap };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(async function (...args) {\n                const error = new ZodError([]);\n                const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await Reflect.apply(fn, this, parsedArgs);\n                const parsedReturns = await me._def.returns._def.type\n                    .parseAsync(result, params)\n                    .catch((e) => {\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        }\n        else {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(function (...args) {\n                const parsedArgs = me._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);\n                }\n                const result = Reflect.apply(fn, this, parsedArgs.data);\n                const parsedReturns = me._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...items) {\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create()),\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType,\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: (args ? args : ZodTuple.create([]).rest(ZodUnknown.create())),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params),\n        });\n    }\n}\nexport class ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n    }\n}\nZodLazy.create = (getter, params) => {\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_literal,\n                expected: this._def.value,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params) => {\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params),\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params),\n    });\n}\nexport class ZodEnum extends ZodType {\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!this._cache) {\n            this._cache = new Set(this._def.values);\n        }\n        if (!this._cache.has(input.data)) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    extract(values, newDef = this._def) {\n        return ZodEnum.create(values, {\n            ...this._def,\n            ...newDef,\n        });\n    }\n    exclude(values, newDef = this._def) {\n        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {\n            ...this._def,\n            ...newDef,\n        });\n    }\n}\nZodEnum.create = createZodEnum;\nexport class ZodNativeEnum extends ZodType {\n    _parse(input) {\n        const nativeEnumValues = util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!this._cache) {\n            this._cache = new Set(util.getValidEnumValues(this._def.values));\n        }\n        if (!this._cache.has(input.data)) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\nZodNativeEnum.create = (values, params) => {\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodPromise extends ZodType {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.promise,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);\n        return OK(promisified.then((data) => {\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap,\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params) => {\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects\n            ? this._def.schema.sourceType()\n            : this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        const checkCtx = {\n            addIssue: (arg) => {\n                addIssueToContext(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                }\n                else {\n                    status.dirty();\n                }\n            },\n            get path() {\n                return ctx.path;\n            },\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data, checkCtx);\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then(async (processed) => {\n                    if (status.value === \"aborted\")\n                        return INVALID;\n                    const result = await this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                    if (result.status === \"aborted\")\n                        return INVALID;\n                    if (result.status === \"dirty\")\n                        return DIRTY(result.value);\n                    if (status.value === \"dirty\")\n                        return DIRTY(result.value);\n                    return result;\n                });\n            }\n            else {\n                if (status.value === \"aborted\")\n                    return INVALID;\n                const result = this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (result.status === \"aborted\")\n                    return INVALID;\n                if (result.status === \"dirty\")\n                    return DIRTY(result.value);\n                if (status.value === \"dirty\")\n                    return DIRTY(result.value);\n                return result;\n            }\n        }\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc) => {\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inner.status === \"aborted\")\n                    return INVALID;\n                if (inner.status === \"dirty\")\n                    status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return { status: status.value, value: inner.value };\n            }\n            else {\n                return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {\n                    if (inner.status === \"aborted\")\n                        return INVALID;\n                    if (inner.status === \"dirty\")\n                        status.dirty();\n                    return executeRefinement(inner.value).then(() => {\n                        return { status: status.value, value: inner.value };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (!isValid(base))\n                    return INVALID;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n                }\n                return { status: status.value, value: result };\n            }\n            else {\n                return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {\n                    if (!isValid(base))\n                        return INVALID;\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({\n                        status: status.value,\n                        value: result,\n                    }));\n                });\n            }\n        }\n        util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params) => {\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params),\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n    return new ZodEffects({\n        schema,\n        effect: { type: \"preprocess\", transform: preprocess },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params),\n    });\n};\nexport { ZodEffects as ZodTransformer };\nexport class ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.undefined) {\n            return OK(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params) => {\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.null) {\n            return OK(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params) => {\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params) => {\n    return new ZodDefault({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\n        defaultValue: typeof params.default === \"function\" ? params.default : () => params.default,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodCatch extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        // newCtx is used to not collect issues from inner types in ctx\n        const newCtx = {\n            ...ctx,\n            common: {\n                ...ctx.common,\n                issues: [],\n            },\n        };\n        const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n                ...newCtx,\n            },\n        });\n        if (isAsync(result)) {\n            return result.then((result) => {\n                return {\n                    status: \"valid\",\n                    value: result.status === \"valid\"\n                        ? result.value\n                        : this._def.catchValue({\n                            get error() {\n                                return new ZodError(newCtx.common.issues);\n                            },\n                            input: newCtx.data,\n                        }),\n                };\n            });\n        }\n        else {\n            return {\n                status: \"valid\",\n                value: result.status === \"valid\"\n                    ? result.value\n                    : this._def.catchValue({\n                        get error() {\n                            return new ZodError(newCtx.common.issues);\n                        },\n                        input: newCtx.data,\n                    }),\n            };\n        }\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nZodCatch.create = (type, params) => {\n    return new ZodCatch({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\n        catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\n        ...processCreateParams(params),\n    });\n};\nexport class ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.nan,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n}\nZodNaN.create = (params) => {\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params),\n    });\n};\nexport const BRAND = Symbol(\"zod_brand\");\nexport class ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nexport class ZodPipeline extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.common.async) {\n            const handleAsync = async () => {\n                const inResult = await this._def.in._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inResult.status === \"aborted\")\n                    return INVALID;\n                if (inResult.status === \"dirty\") {\n                    status.dirty();\n                    return DIRTY(inResult.value);\n                }\n                else {\n                    return this._def.out._parseAsync({\n                        data: inResult.value,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                }\n            };\n            return handleAsync();\n        }\n        else {\n            const inResult = this._def.in._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n            if (inResult.status === \"aborted\")\n                return INVALID;\n            if (inResult.status === \"dirty\") {\n                status.dirty();\n                return {\n                    status: \"dirty\",\n                    value: inResult.value,\n                };\n            }\n            else {\n                return this._def.out._parseSync({\n                    data: inResult.value,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n    }\n    static create(a, b) {\n        return new ZodPipeline({\n            in: a,\n            out: b,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline,\n        });\n    }\n}\nexport class ZodReadonly extends ZodType {\n    _parse(input) {\n        const result = this._def.innerType._parse(input);\n        const freeze = (data) => {\n            if (isValid(data)) {\n                data.value = Object.freeze(data.value);\n            }\n            return data;\n        };\n        return isAsync(result) ? result.then((data) => freeze(data)) : freeze(result);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodReadonly.create = (type, params) => {\n    return new ZodReadonly({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodReadonly,\n        ...processCreateParams(params),\n    });\n};\n////////////////////////////////////////\n////////////////////////////////////////\n//////////                    //////////\n//////////      z.custom      //////////\n//////////                    //////////\n////////////////////////////////////////\n////////////////////////////////////////\nfunction cleanParams(params, data) {\n    const p = typeof params === \"function\" ? params(data) : typeof params === \"string\" ? { message: params } : params;\n    const p2 = typeof p === \"string\" ? { message: p } : p;\n    return p2;\n}\nexport function custom(check, _params = {}, \n/**\n * @deprecated\n *\n * Pass `fatal` into the params object instead:\n *\n * ```ts\n * z.string().custom((val) => val.length > 5, { fatal: false })\n * ```\n *\n */\nfatal) {\n    if (check)\n        return ZodAny.create().superRefine((data, ctx) => {\n            const r = check(data);\n            if (r instanceof Promise) {\n                return r.then((r) => {\n                    if (!r) {\n                        const params = cleanParams(_params, data);\n                        const _fatal = params.fatal ?? fatal ?? true;\n                        ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n                    }\n                });\n            }\n            if (!r) {\n                const params = cleanParams(_params, data);\n                const _fatal = params.fatal ?? fatal ?? true;\n                ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n            }\n            return;\n        });\n    return ZodAny.create();\n}\nexport { ZodType as Schema, ZodType as ZodSchema };\nexport const late = {\n    object: ZodObject.lazycreate,\n};\nexport var ZodFirstPartyTypeKind;\n(function (ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\n    ZodFirstPartyTypeKind[\"ZodReadonly\"] = \"ZodReadonly\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\n// requires TS 4.4+\nclass Class {\n    constructor(..._) { }\n}\nconst instanceOfType = (\n// const instanceOfType = <T extends new (...args: any[]) => any>(\ncls, params = {\n    message: `Input not instance of ${cls.name}`,\n}) => custom((data) => data instanceof cls, params);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = () => stringType().optional();\nconst onumber = () => numberType().optional();\nconst oboolean = () => booleanType().optional();\nexport const coerce = {\n    string: ((arg) => ZodString.create({ ...arg, coerce: true })),\n    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),\n    boolean: ((arg) => ZodBoolean.create({\n        ...arg,\n        coerce: true,\n    })),\n    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),\n    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),\n};\nexport { anyType as any, arrayType as array, bigIntType as bigint, booleanType as boolean, dateType as date, discriminatedUnionType as discriminatedUnion, effectsType as effect, enumType as enum, functionType as function, instanceOfType as instanceof, intersectionType as intersection, lazyType as lazy, literalType as literal, mapType as map, nanType as nan, nativeEnumType as nativeEnum, neverType as never, nullType as null, nullableType as nullable, numberType as number, objectType as object, oboolean, onumber, optionalType as optional, ostring, pipelineType as pipeline, preprocessType as preprocess, promiseType as promise, recordType as record, setType as set, strictObjectType as strictObject, stringType as string, symbolType as symbol, effectsType as transformer, tupleType as tuple, undefinedType as undefined, unionType as union, unknownType as unknown, voidType as void, };\nexport const NEVER = INVALID;\n","import { z } from 'zod';\r\n\r\n// Envelope used for WebSocket messages\r\nexport const messageEnvelopeSchema = z.object({\r\n  type: z.enum([\r\n    'connection_established',\r\n    'live_health_update',\r\n    'historical_data_update',\r\n    'emergency_alert',\r\n    'error',\r\n    'pong',\r\n  ]),\r\n  data: z.unknown().optional(),\r\n  timestamp: z.string().datetime().optional(),\r\n});\r\n\r\n// Minimal live health metric structure\r\nexport const healthMetricSchema = z.object({\r\n  type: z\r\n    .enum(['heart_rate', 'walking_steadiness', 'steps', 'oxygen_saturation'])\r\n    .describe('metric identifier'),\r\n  value: z.number().describe('numeric value for the metric'),\r\n  unit: z.string().optional(),\r\n});\r\n\r\nexport const processedHealthDataSchema = z.object({\r\n  type: healthMetricSchema.shape.type,\r\n  value: z.number(),\r\n  processedAt: z.string().datetime(),\r\n  validated: z.boolean(),\r\n  healthScore: z.number().optional(),\r\n  fallRisk: z.enum(['low', 'moderate', 'high', 'critical']).optional(),\r\n  alert: z\r\n    .object({\r\n      level: z.enum(['warning', 'critical']),\r\n      message: z.string(),\r\n    })\r\n    .nullable()\r\n    .optional(),\r\n});\r\n\r\nexport type MessageEnvelope = z.infer<typeof messageEnvelopeSchema>;\r\nexport type HealthMetric = z.infer<typeof healthMetricSchema>;\r\nexport type ProcessedHealthData = z.infer<typeof processedHealthDataSchema>;\r\n","// Security utilities for Workers runtime (ESM). Keep small and edge-safe.\r\nimport { z } from 'zod'\r\n\r\n// Minimal redaction-friendly logger\r\nexport const log = {\r\n  info: (msg: string, meta?: Record<string, unknown>) => console.log(msg, safeMeta(meta)),\r\n  warn: (msg: string, meta?: Record<string, unknown>) => console.warn(msg, safeMeta(meta)),\r\n  error: (msg: string, meta?: Record<string, unknown>) => console.error(msg, safeMeta(meta)),\r\n}\r\n\r\nfunction safeMeta(meta?: Record<string, unknown>) {\r\n  if (!meta) return {}\r\n  try {\r\n    // Drop keys that might contain PHI or PII\r\n    const blocked = ['body', 'data', 'payload', 'health', 'value', 'name', 'email', 'phone']\r\n    const out: Record<string, unknown> = {}\r\n    for (const [k, v] of Object.entries(meta)) {\r\n      out[k] = blocked.includes(k) ? '[redacted]' : v\r\n    }\r\n    return out\r\n  } catch {\r\n    return {}\r\n  }\r\n}\r\n\r\n// HTTP security headers\r\nexport function applySecurityHeaders(resp: Response, csp: string): Response {\r\n  const h = new Headers(resp.headers)\r\n  h.set('Strict-Transport-Security', 'max-age=31536000; includeSubDomains; preload')\r\n  h.set('X-Content-Type-Options', 'nosniff')\r\n  h.set('X-Frame-Options', 'DENY')\r\n  h.set('Referrer-Policy', 'no-referrer')\r\n  h.set('Permissions-Policy', 'geolocation=(), microphone=(), camera=()')\r\n  h.set('Content-Security-Policy', csp)\r\n  return new Response(resp.body, { status: resp.status, headers: h })\r\n}\r\n\r\n// CORS helper – restrict in production\r\nexport function corsHeaders(origin: string | null, allowedOrigins: string[]): Headers {\r\n  const headers = new Headers()\r\n  const allow = origin && allowedOrigins.includes(origin) ? origin : ''\r\n  if (allow) {\r\n    headers.set('Access-Control-Allow-Origin', allow)\r\n    headers.set('Vary', 'Origin')\r\n    headers.set('Access-Control-Allow-Credentials', 'true')\r\n    headers.set('Access-Control-Allow-Headers', 'authorization, content-type')\r\n    headers.set('Access-Control-Allow-Methods', 'GET,POST,OPTIONS')\r\n  }\r\n  return headers\r\n}\r\n\r\n// Bearer JWT validation (compact, Workers-native). Use cryptographic verification when you have a JWK/JWT provider.\r\nexport async function validateBearerJWT(token: string, opts: { iss?: string; aud?: string; clockSkewSec?: number } = {}): Promise<{ ok: boolean; sub?: string; claims?: Record<string, unknown> }> {\r\n  try {\r\n    const parts = token.split('.')\r\n    if (parts.length !== 3) return { ok: false }\r\n    const payload = JSON.parse(atob(parts[1]))\r\n    const now = Math.floor(Date.now() / 1000)\r\n    const skew = opts.clockSkewSec ?? 60\r\n    if (typeof payload.exp === 'number' && now > payload.exp + skew) return { ok: false }\r\n    if (typeof payload.nbf === 'number' && now + skew < payload.nbf) return { ok: false }\r\n    if (opts.iss && payload.iss !== opts.iss) return { ok: false }\r\n    if (opts.aud && payload.aud !== opts.aud) return { ok: false }\r\n    // NOTE: Signature not verified here. For production, verify with your IdP JWKs.\r\n    return { ok: true, sub: payload.sub, claims: payload }\r\n  } catch {\r\n    return { ok: false }\r\n  }\r\n}\r\n\r\n// Base64url helpers\r\nfunction b64urlToBytes(input: string): Uint8Array {\r\n  const pad = input.length % 4 === 0 ? '' : '='.repeat(4 - (input.length % 4))\r\n  const b64 = input.replace(/-/g, '+').replace(/_/g, '/') + pad\r\n  const str = atob(b64)\r\n  const bytes = new Uint8Array(str.length)\r\n  for (let i = 0; i < str.length; i++) bytes[i] = str.charCodeAt(i)\r\n  return bytes\r\n}\r\n\r\ntype JWK = JsonWebKey & { kid?: string; alg?: string; kty: string }\r\n\r\nconst jwksCache: Map<string, { fetchedAt: number; ttlMs: number; keys: Record<string, CryptoKey> }> = new Map()\r\n\r\nasync function getCryptoKeyForKid(jwksUrl: string, kid: string): Promise<CryptoKey | null> {\r\n  const cacheKey = jwksUrl\r\n  const now = Date.now()\r\n  const cached = jwksCache.get(cacheKey)\r\n  if (cached && now - cached.fetchedAt < cached.ttlMs && cached.keys[kid]) return cached.keys[kid]\r\n\r\n  try {\r\n    // Avoid CF-specific RequestInit typing; rely on edge cache by URL\r\n    const res = await fetch(jwksUrl)\r\n    if (!res.ok) return null\r\n    const json = (await res.json()) as { keys?: JWK[] }\r\n    const map: Record<string, CryptoKey> = {}\r\n    if (json.keys && Array.isArray(json.keys)) {\r\n      for (const k of json.keys) {\r\n        if (k.kty !== 'RSA') continue\r\n        const key = await crypto.subtle.importKey(\r\n          'jwk',\r\n          k,\r\n          { name: 'RSASSA-PKCS1-v1_5', hash: 'SHA-256' },\r\n          false,\r\n          ['verify']\r\n        )\r\n        if (k.kid) map[k.kid] = key\r\n      }\r\n    }\r\n    jwksCache.set(cacheKey, { fetchedAt: now, ttlMs: 5 * 60 * 1000, keys: map })\r\n    return map[kid] || null\r\n  } catch {\r\n    return null\r\n  }\r\n}\r\n\r\nexport async function verifyJwtWithJwks(\r\n  token: string,\r\n  opts: { iss?: string; aud?: string; jwksUrl: string; clockSkewSec?: number }\r\n): Promise<{ ok: boolean; sub?: string; claims?: Record<string, unknown> }> {\r\n  try {\r\n    const [h, p, s] = token.split('.')\r\n    if (!h || !p || !s) return { ok: false }\r\n    const header = JSON.parse(new TextDecoder().decode(b64urlToBytes(h))) as { alg?: string; kid?: string }\r\n    if (header.alg !== 'RS256' || !header.kid) return { ok: false }\r\n    const key = await getCryptoKeyForKid(opts.jwksUrl, header.kid)\r\n    if (!key) return { ok: false }\r\n  const dataBytes = new TextEncoder().encode(`${h}.${p}`)\r\n  const sigBytes = b64urlToBytes(s)\r\n  // Copy into fresh arrays to satisfy BufferSource typing in TS DOM lib\r\n  const dataArr = new Uint8Array(dataBytes.length); dataArr.set(dataBytes)\r\n  const sigArr = new Uint8Array(sigBytes.length); sigArr.set(sigBytes)\r\n  const valid = await crypto.subtle.verify('RSASSA-PKCS1-v1_5', key, sigArr, dataArr)\r\n    if (!valid) return { ok: false }\r\n    const payload = JSON.parse(new TextDecoder().decode(b64urlToBytes(p))) as Record<string, unknown>\r\n    const now = Math.floor(Date.now() / 1000)\r\n    const skew = opts.clockSkewSec ?? 60\r\n    if (typeof payload.exp === 'number' && now > payload.exp + skew) return { ok: false }\r\n    if (typeof payload.nbf === 'number' && now + skew < payload.nbf) return { ok: false }\r\n    if (opts.iss && payload.iss !== opts.iss) return { ok: false }\r\n    if (opts.aud && payload.aud !== opts.aud) return { ok: false }\r\n    return { ok: true, sub: payload.sub as string | undefined, claims: payload }\r\n  } catch {\r\n    return { ok: false }\r\n  }\r\n}\r\n\r\n// Decode JWT payload without verification (for non-security-critical flows like deriving rate-limit keys).\r\nexport function decodeJwtPayload(token: string): Record<string, unknown> | null {\r\n  try {\r\n    const parts = token.split('.')\r\n    if (parts.length < 2) return null\r\n    const payload = JSON.parse(new TextDecoder().decode(b64urlToBytes(parts[1])))\r\n    return payload as Record<string, unknown>\r\n  } catch {\r\n    return null\r\n  }\r\n}\r\n\r\n// Minimal audit writer: writes JSON line to R2 if bound; otherwise no-op\r\nexport async function writeAudit(\r\n  env: { HEALTH_STORAGE?: { put: (key: string, data: string | ReadableStream | ArrayBuffer, opts?: any) => Promise<any> } },\r\n  event: { type: string; at?: string; actor?: string; resource?: string; meta?: Record<string, unknown> }\r\n): Promise<void> {\r\n  try {\r\n  const at = event.at || new Date().toISOString()\r\n  const line = JSON.stringify({ type: event.type, at, actor: event.actor ?? 'anonymous', resource: event.resource ?? '-', meta: event.meta ?? {} }) + '\\n'\r\n    if (env.HEALTH_STORAGE) {\r\n      // Append-like behavior: R2 doesn't support append, so we can write separate objects per event in production.\r\n      // For demo, we store one object per event.\r\n      const eventKey = `audit/events/${at}_${Math.random().toString(36).slice(2)}.json`\r\n      await env.HEALTH_STORAGE.put(eventKey, line, { httpMetadata: { contentType: 'application/json' } })\r\n    }\r\n  } catch (e) {\r\n    log.warn('audit_write_failed', { error: (e as Error).message })\r\n  }\r\n}\r\n\r\n// Application-level encryption helpers (AES-GCM). Key must be 32 bytes (base64 in ENV).\r\nexport async function getAesKey(base64Key: string): Promise<CryptoKey> {\r\n  const raw = Uint8Array.from(atob(base64Key), c => c.charCodeAt(0))\r\n  if (raw.byteLength !== 32) throw new Error('ENC_KEY must be 32 bytes (base64)')\r\n  return crypto.subtle.importKey('raw', raw, { name: 'AES-GCM' }, false, ['encrypt', 'decrypt'])\r\n}\r\n\r\nexport async function encryptJSON<T>(key: CryptoKey, data: T): Promise<string> {\r\n  const iv = crypto.getRandomValues(new Uint8Array(12))\r\n  const encoded = new TextEncoder().encode(JSON.stringify(data))\r\n  const ct = await crypto.subtle.encrypt({ name: 'AES-GCM', iv }, key, encoded)\r\n  const out = new Uint8Array(iv.byteLength + ct.byteLength)\r\n  out.set(iv, 0)\r\n  out.set(new Uint8Array(ct), iv.byteLength)\r\n  return btoa(String.fromCharCode(...out))\r\n}\r\n\r\nexport async function decryptJSON<T>(key: CryptoKey, b64: string): Promise<T> {\r\n  const bytes = Uint8Array.from(atob(b64), c => c.charCodeAt(0))\r\n  const iv = bytes.slice(0, 12)\r\n  const ct = bytes.slice(12)\r\n  const pt = await crypto.subtle.decrypt({ name: 'AES-GCM', iv }, key, ct)\r\n  return JSON.parse(new TextDecoder().decode(pt)) as T\r\n}\r\n\r\n// Simple schema guard wrapper for Workers handlers\r\nexport function validateBody<T>(schema: z.Schema<T>) {\r\n  return async (req: Request): Promise<{ ok: true; data: T } | { ok: false; error: any }> => {\r\n    try {\r\n      const json = await req.json()\r\n      const parsed = schema.safeParse(json)\r\n      if (!parsed.success) return { ok: false, error: parsed.error.flatten() }\r\n      return { ok: true, data: parsed.data }\r\n    } catch {\r\n      return { ok: false, error: 'invalid_json' }\r\n    }\r\n  }\r\n}\r\n","// TTL policy (seconds) per health record type; adjust for production policy\r\nconst DAY = 24 * 60 * 60;\r\nconst policies: Record<string, number> = {\r\n  heart_rate: 30 * DAY,\r\n  steps: 30 * DAY,\r\n  walking_steadiness: 180 * DAY,\r\n  sleep: 90 * DAY,\r\n  activity: 90 * DAY,\r\n  fall_event: 365 * DAY,\r\n};\r\n\r\nexport function getTtlSecondsForType(\r\n  type: string,\r\n  environment?: string\r\n): number {\r\n  const base = policies[type] ?? 30 * DAY;\r\n  // Shorter TTLs in development to avoid lingering data\r\n  if (environment && environment !== 'production')\r\n    return Math.min(base, 2 * DAY);\r\n  return base;\r\n}\r\n\r\n// Minimal KV interface used for retention purge\r\nexport type KVNamespaceLite = {\r\n  list: (opts?: {\r\n    prefix?: string;\r\n    limit?: number;\r\n  }) => Promise<{ keys: Array<{ name: string }> }>;\r\n  delete: (key: string) => Promise<void>;\r\n};\r\n\r\n// Purge old health data based on TTL inferred from key format: health:{type}:{iso}\r\nexport async function purgeOldHealthData(\r\n  env: { ENVIRONMENT?: string },\r\n  kv: KVNamespaceLite,\r\n  opts?: { limit?: number; prefix?: string }\r\n): Promise<{ scanned: number; deleted: number }> {\r\n  const limit = Math.max(1, Math.min(2000, opts?.limit ?? 1000));\r\n  const prefix = opts?.prefix ?? 'health:';\r\n  const listing = await kv.list({ prefix, limit });\r\n  const now = Date.now();\r\n  let scanned = 0;\r\n  let deleted = 0;\r\n  for (const k of listing.keys) {\r\n    scanned += 1;\r\n    const parts = k.name.split(':');\r\n    if (parts.length < 3) continue;\r\n    const type = parts[1];\r\n    const iso = parts.slice(2).join(':');\r\n    const ttlSec = getTtlSecondsForType(type, env.ENVIRONMENT);\r\n    const ts = Date.parse(iso);\r\n    if (!Number.isFinite(ts)) continue;\r\n    const cutoff = ts + ttlSec * 1000;\r\n    if (now > cutoff) {\r\n      try {\r\n        await kv.delete(k.name);\r\n        deleted += 1;\r\n      } catch {\r\n        // Ignore delete errors in purge\r\n      }\r\n    }\r\n  }\r\n  return { scanned, deleted };\r\n}\r\n","/**\r\n * Cloudflare Workers entry point for the Health App\r\n * This file handles the worker logic and serves the built application\r\n */\r\n\r\nimport { Hono, type Context } from 'hono';\r\nimport { z } from 'zod';\r\nimport {\r\n  processedHealthDataSchema,\r\n  healthMetricSchema,\r\n  type ProcessedHealthData,\r\n} from '@/schemas/health';\r\nimport {\r\n  applySecurityHeaders,\r\n  corsHeaders,\r\n  getAesKey,\r\n  encryptJSON,\r\n  log,\r\n  validateBearerJWT,\r\n  verifyJwtWithJwks,\r\n  writeAudit,\r\n  decodeJwtPayload,\r\n  decryptJSON,\r\n} from '@/lib/security';\r\nimport {\r\n  getTtlSecondsForType,\r\n  purgeOldHealthData,\r\n  type KVNamespaceLite,\r\n} from '@/lib/retention';\r\n\r\ntype Env = {\r\n  ENVIRONMENT?: string;\r\n  ALLOWED_ORIGINS?: string; // comma-separated\r\n  ENC_KEY?: string; // base64 32 bytes\r\n  API_ISS?: string;\r\n  API_AUD?: string;\r\n  API_JWKS_URL?: string;\r\n  HEALTH_KV?: {\r\n    put: (\r\n      key: string,\r\n      value: string,\r\n      options?: { expirationTtl?: number }\r\n    ) => Promise<void>;\r\n    get?: (key: string) => Promise<string | null>;\r\n    list?: (opts: {\r\n      prefix?: string;\r\n      limit?: number;\r\n      cursor?: string;\r\n    }) => Promise<{\r\n      keys: Array<{ name: string }>;\r\n      list_complete?: boolean;\r\n      cursor?: string;\r\n    }>;\r\n    delete?: (key: string) => Promise<void>;\r\n  };\r\n  HEALTH_STORAGE?: {\r\n    put: (\r\n      key: string,\r\n      data: string | ReadableStream | ArrayBuffer,\r\n      opts?: { httpMetadata?: { contentType?: string } }\r\n    ) => Promise<unknown>;\r\n    get: (\r\n      key: string,\r\n      opts?: { range?: { offset: number; length?: number } }\r\n    ) => Promise<{ body?: ReadableStream | null } | null>;\r\n    list: (opts?: { prefix?: string; limit?: number }) => Promise<{\r\n      objects: Array<{ key: string; uploaded?: string | Date }>;\r\n    }>;\r\n  };\r\n  ASSETS?: {\r\n    fetch: (req: Request) => Promise<Response>;\r\n  };\r\n  RATE_LIMITER?: {\r\n    idFromName: (name: string) => unknown;\r\n    get: (id: unknown) => {\r\n      fetch: (req: Request | string) => Promise<Response>;\r\n    };\r\n  };\r\n};\r\n\r\nconst app = new Hono<{ Bindings: Env }>();\r\n\r\n// Simple token-bucket rate limiter (per IP in-memory, acceptable for single isolate; use Durable Objects for distributed)\r\nconst buckets = new Map<string, { tokens: number; last: number }>();\r\nfunction rateLimit(ip: string, limit = 60, intervalMs = 60_000): boolean {\r\n  const now = Date.now();\r\n  const b = buckets.get(ip) || { tokens: limit, last: now };\r\n  const elapsed = now - b.last;\r\n  const refill = Math.floor(elapsed / intervalMs) * limit;\r\n  b.tokens = Math.min(limit, b.tokens + refill);\r\n  b.last = now;\r\n  if (b.tokens <= 0) {\r\n    buckets.set(ip, b);\r\n    return false;\r\n  }\r\n  b.tokens -= 1;\r\n  buckets.set(ip, b);\r\n  return true;\r\n}\r\n\r\nasync function rateLimitDO(\r\n  c: Context<{ Bindings: Env }>,\r\n  key: string,\r\n  limit = 60,\r\n  intervalMs = 60_000\r\n): Promise<boolean> {\r\n  try {\r\n    if (!c.env.RATE_LIMITER) return rateLimit(key, limit, intervalMs);\r\n    const id = c.env.RATE_LIMITER.idFromName(key);\r\n    const stub = c.env.RATE_LIMITER.get(id);\r\n    const u = new URL('https://do.local/consume');\r\n    u.searchParams.set('key', key);\r\n    u.searchParams.set('limit', String(limit));\r\n    u.searchParams.set('intervalMs', String(intervalMs));\r\n    const resp = await stub.fetch(new Request(u.toString()));\r\n    if (!resp.ok) return false;\r\n    const body = await resp.json().catch(() => ({ ok: false }));\r\n    return Boolean(body.ok);\r\n  } catch {\r\n    // Fallback to in-memory limiter on errors\r\n    return rateLimit(key, limit, intervalMs);\r\n  }\r\n}\r\n\r\nfunction deriveRateLimitKey(c: Context<{ Bindings: Env }>): string {\r\n  // Prefer per-user limit from JWT sub, fallback to IP\r\n  const auth = c.req.header('Authorization') || '';\r\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : '';\r\n  const sub = token\r\n    ? (decodeJwtPayload(token)?.sub as string | undefined)\r\n    : undefined;\r\n  return sub || c.req.header('CF-Connecting-IP') || 'anon';\r\n}\r\n\r\nasync function requireAuth(c: Context<{ Bindings: Env }>): Promise<boolean> {\r\n  if (c.env.ENVIRONMENT !== 'production') return true;\r\n  const auth = c.req.header('Authorization') || '';\r\n  const token = auth.startsWith('Bearer ') ? auth.slice(7) : '';\r\n  if (!token) return false;\r\n  const jwksUrl = c.env.API_JWKS_URL;\r\n  if (jwksUrl) {\r\n    const check = await verifyJwtWithJwks(token, {\r\n      iss: c.env.API_ISS,\r\n      aud: c.env.API_AUD,\r\n      jwksUrl,\r\n    });\r\n    return check.ok;\r\n  }\r\n  const check = await validateBearerJWT(token, {\r\n    iss: c.env.API_ISS,\r\n    aud: c.env.API_AUD,\r\n  });\r\n  return check.ok;\r\n}\r\n\r\n// Preflight and security headers\r\napp.use('*', async (c, next) => {\r\n  const origin = c.req.header('Origin') || null;\r\n  const allowed = (c.env.ALLOWED_ORIGINS || '')\r\n    .split(',')\r\n    .map((s) => s.trim())\r\n    .filter(Boolean);\r\n  const correlationId = crypto.randomUUID();\r\n  c.res = c.newResponse(null); // initialize so we can set headers later\r\n\r\n  if (c.req.method === 'OPTIONS') {\r\n    const h = corsHeaders(origin, allowed);\r\n    h.set('X-Correlation-Id', correlationId);\r\n    return c.newResponse(null, { status: 204, headers: h });\r\n  }\r\n\r\n  await next();\r\n\r\n  const csp = [\r\n    \"default-src 'self'\",\r\n    \"img-src 'self' data:\",\r\n    \"style-src 'self' 'unsafe-inline'\", // Tailwind inlined\r\n    \"script-src 'self'\",\r\n    \"connect-src 'self' https: wss:\",\r\n    \"frame-ancestors 'none'\",\r\n  ].join('; ');\r\n\r\n  const resp = applySecurityHeaders(c.res, csp);\r\n  const h = corsHeaders(origin, allowed);\r\n  resp.headers.set('X-Correlation-Id', correlationId);\r\n  h.forEach((v, k) => resp.headers.set(k, v));\r\n  return resp;\r\n});\r\n\r\n// API-wide middleware: rate limiting and auth (auth is a no-op in non-production)\r\napp.use('/api/*', async (c, next) => {\r\n  const key = deriveRateLimitKey(c);\r\n  if (!(await rateLimitDO(c, key)))\r\n    return c.json({ error: 'rate_limited' }, 429);\r\n  if (!(await requireAuth(c))) return c.json({ error: 'unauthorized' }, 401);\r\n  return next();\r\n});\r\n\r\n// Serve static assets via Wrangler [assets] binding; fallback to next on 404\r\napp.use('/*', async (c, next) => {\r\n  const res = await c.env.ASSETS?.fetch(c.req.raw);\r\n  if (!res || res.status === 404) return next();\r\n  return res;\r\n});\r\n\r\n// Health check endpoint\r\napp.get('/health', (c) => {\r\n  return c.json({\r\n    status: 'healthy',\r\n    timestamp: new Date().toISOString(),\r\n    environment: c.env.ENVIRONMENT || 'unknown',\r\n  });\r\n});\r\n\r\n// WebSocket endpoint for real-time health data (not implemented in Worker yet)\r\napp.get('/ws', (c) => {\r\n  return c.text(\r\n    'WebSocket endpoint not available on Worker. Use local bridge server.',\r\n    426\r\n  );\r\n});\r\n// Non-production self-test for crypto/auth\r\napp.get('/api/_selftest', async (c) => {\r\n  if (c.env.ENVIRONMENT === 'production')\r\n    return c.json({ error: 'not_available' }, 404);\r\n  const results: Record<string, unknown> = {};\r\n  try {\r\n    const encKeyB64 = c.env.ENC_KEY;\r\n    if (encKeyB64) {\r\n      const key = await getAesKey(encKeyB64);\r\n      const sample = { hello: 'world', at: Date.now() };\r\n      const ct = await encryptJSON(key, sample);\r\n      results.aes_gcm = { ok: true, ciphertextLength: ct.length };\r\n    } else {\r\n      results.aes_gcm = { ok: false, reason: 'no_key' };\r\n    }\r\n  } catch (e) {\r\n    results.aes_gcm = { ok: false, error: (e as Error).message };\r\n  }\r\n  // JWT negative check\r\n  try {\r\n    const bogus =\r\n      'eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJiYSIsImF1ZCI6ImF1ZCIsImV4cCI6MX0.signature';\r\n    const jwks = c.env.API_JWKS_URL;\r\n    if (jwks) {\r\n      const res = await verifyJwtWithJwks(bogus, {\r\n        iss: 'ba',\r\n        aud: 'aud',\r\n        jwksUrl: jwks,\r\n      });\r\n      results.jwt_jwks_negative = { ok: !res.ok };\r\n    } else {\r\n      results.jwt_claims_negative = {\r\n        ok: !(await validateBearerJWT(bogus)).ok,\r\n      };\r\n    }\r\n  } catch (e) {\r\n    results.jwt_error = { ok: false, error: (e as Error).message };\r\n  }\r\n  return c.json({ ok: true, results });\r\n});\r\n\r\n// Dev-only: rate limit remaining probe (does not consume)\r\napp.get('/api/_ratelimit', async (c) => {\r\n  if (c.env.ENVIRONMENT === 'production')\r\n    return c.json({ error: 'not_available' }, 404);\r\n  const key =\r\n    new URL(c.req.url).searchParams.get('key') || deriveRateLimitKey(c);\r\n  try {\r\n    if (!c.env.RATE_LIMITER) return c.json({ error: 'no_rate_limiter' }, 500);\r\n    const id = c.env.RATE_LIMITER.idFromName(key);\r\n    const stub = c.env.RATE_LIMITER.get(id);\r\n    const u = new URL('https://do.local/consume');\r\n    u.searchParams.set('key', key);\r\n    u.searchParams.set('probe', '1');\r\n    const resp = await stub.fetch(new Request(u.toString()));\r\n    const body = await resp.json().catch(() => ({ ok: false }));\r\n    return c.json({ ok: true, key, remaining: body.remaining ?? null });\r\n  } catch (e) {\r\n    return c.json({ ok: false, error: (e as Error).message }, 500);\r\n  }\r\n});\r\n\r\n// Dev-only: simple audit viewer (lists recent events from R2)\r\napp.get('/api/_audit', async (c) => {\r\n  if (c.env.ENVIRONMENT === 'production')\r\n    return c.json({ error: 'not_available' }, 404);\r\n  if (!c.env.HEALTH_STORAGE) return c.json({ error: 'no_storage' }, 500);\r\n  const url = new URL(c.req.url);\r\n  const limit = Math.max(\r\n    1,\r\n    Math.min(100, Number(url.searchParams.get('limit') || 20))\r\n  );\r\n  const withBodies = url.searchParams.get('withBodies') === '1';\r\n  try {\r\n    const listing = await c.env.HEALTH_STORAGE.list({\r\n      prefix: 'audit/events/',\r\n      limit: 1000,\r\n    });\r\n    const objects = (listing.objects || [])\r\n      .sort((a, b) => (a.key < b.key ? 1 : -1))\r\n      .slice(0, limit);\r\n\r\n    if (!withBodies) {\r\n      return c.json({\r\n        ok: true,\r\n        count: objects.length,\r\n        keys: objects.map((o) => o.key),\r\n      });\r\n    }\r\n\r\n    const events: Array<{ key: string; line?: string }> = [];\r\n    for (const obj of objects) {\r\n      const got = await c.env.HEALTH_STORAGE.get(obj.key);\r\n      if (got?.body) {\r\n        const text = await new Response(got.body).text();\r\n        // Only include a single line (as written by writeAudit)\r\n        const line = text.split('\\n')[0];\r\n        events.push({ key: obj.key, line });\r\n      } else {\r\n        events.push({ key: obj.key });\r\n      }\r\n    }\r\n    return c.json({ ok: true, count: events.length, events });\r\n  } catch (e) {\r\n    return c.json({ ok: false, error: (e as Error).message }, 500);\r\n  }\r\n});\r\n\r\n// Dev-only purge trigger\r\napp.post('/api/_purge', async (c) => {\r\n  if (c.env.ENVIRONMENT === 'production')\r\n    return c.json({ error: 'not_available' }, 404);\r\n  const url = new URL(c.req.url);\r\n  const limit = Math.max(\r\n    1,\r\n    Math.min(2000, Number(url.searchParams.get('limit') || 1000))\r\n  );\r\n  const prefix = url.searchParams.get('prefix') || 'health:';\r\n  const kv = c.env.HEALTH_KV as unknown as KVNamespaceLite | undefined;\r\n  if (!kv || typeof kv.list !== 'function' || typeof kv.delete !== 'function')\r\n    return c.json({ ok: true, scanned: 0, deleted: 0 });\r\n  const res = await purgeOldHealthData(c.env, kv, { limit, prefix });\r\n  return c.json({ ok: true, ...res });\r\n});\r\n\r\n// API routes for health data\r\napp.get('/api/health-data', async (c) => {\r\n  // Validate query params\r\n  const querySchema = z.object({\r\n    from: z.string().datetime().optional(),\r\n    to: z.string().datetime().optional(),\r\n    metric: healthMetricSchema.shape.type.optional(),\r\n    limit: z.coerce.number().min(1).max(500).optional(),\r\n    cursor: z.string().optional(),\r\n  });\r\n\r\n  const url = new URL(c.req.url);\r\n  const params = Object.fromEntries(url.searchParams.entries());\r\n  const parsed = querySchema.safeParse(params);\r\n  if (!parsed.success) {\r\n    return c.json(\r\n      { error: 'validation_error', details: parsed.error.flatten() },\r\n      400\r\n    );\r\n  }\r\n\r\n  const { from, to, metric, cursor } = parsed.data;\r\n  const limit = parsed.data.limit ?? 100;\r\n  const kv = c.env.HEALTH_KV;\r\n  if (!kv || typeof kv.list !== 'function' || typeof kv.get !== 'function') {\r\n    // KV not bound or missing methods in this environment\r\n    return c.json({ ok: true, data: [] });\r\n  }\r\n  const prefix = metric ? `health:${metric}:` : 'health:';\r\n  try {\r\n    const listing = await kv.list({ prefix, limit, cursor });\r\n    const encKeyB64 = c.env.ENC_KEY;\r\n    const keyObj = encKeyB64 ? await getAesKey(encKeyB64) : null;\r\n    const rows: Array<ProcessedHealthData> = [];\r\n    for (const k of listing.keys) {\r\n      const raw = await kv.get(k.name);\r\n      if (!raw) continue;\r\n      const objUnknown = keyObj\r\n        ? await (async () => {\r\n            try {\r\n              return await decryptJSON<unknown>(keyObj, raw);\r\n            } catch {\r\n              return null;\r\n            }\r\n          })()\r\n        : (() => {\r\n            try {\r\n              return JSON.parse(raw) as unknown;\r\n            } catch {\r\n              return null;\r\n            }\r\n          })();\r\n      if (!objUnknown) continue;\r\n      const parsedRow = processedHealthDataSchema.safeParse(objUnknown);\r\n      if (!parsedRow.success) continue;\r\n      const obj = parsedRow.data;\r\n      // Filter by from/to on processedAt\r\n      if (from) {\r\n        if (new Date(obj.processedAt).getTime() < new Date(from).getTime())\r\n          continue;\r\n      }\r\n      if (to) {\r\n        if (new Date(obj.processedAt).getTime() > new Date(to).getTime())\r\n          continue;\r\n      }\r\n      rows.push(obj);\r\n      if (rows.length >= limit) break;\r\n    }\r\n    // Sort by processedAt desc (KV list returns lexicographic by key; keep consistent ordering)\r\n    rows.sort((a, b) => (a.processedAt < b.processedAt ? 1 : -1));\r\n    // Include pagination hints; keep backwards compatibility with data[] shape\r\n    return c.json({\r\n      ok: true,\r\n      data: rows,\r\n      nextCursor: listing.list_complete ? undefined : listing.cursor,\r\n      hasMore: listing.list_complete === false,\r\n    });\r\n  } catch (e) {\r\n    log.error('KV read failed', { error: (e as Error).message });\r\n    return c.json({ error: 'server_error' }, 500);\r\n  }\r\n});\r\n\r\napp.post('/api/health-data', async (c) => {\r\n  let body: unknown;\r\n  try {\r\n    body = await c.req.json();\r\n  } catch {\r\n    return c.json({ error: 'invalid_json' }, 400);\r\n  }\r\n\r\n  const parsed = processedHealthDataSchema.safeParse(body);\r\n  if (!parsed.success) {\r\n    return c.json(\r\n      { error: 'validation_error', details: parsed.error.flatten() },\r\n      400\r\n    );\r\n  }\r\n\r\n  // Optionally persist if KV is bound (application-encrypted when ENC_KEY is set)\r\n  try {\r\n    const kv = c.env.HEALTH_KV;\r\n    if (kv) {\r\n      const key = `health:${parsed.data.type}:${parsed.data.processedAt}`;\r\n      const encKey = c.env.ENC_KEY ? await getAesKey(c.env.ENC_KEY) : null;\r\n      const payload = encKey\r\n        ? await encryptJSON(encKey, parsed.data)\r\n        : JSON.stringify(parsed.data);\r\n      const ttl = getTtlSecondsForType(parsed.data.type, c.env.ENVIRONMENT);\r\n      await kv.put(key, payload, { expirationTtl: ttl });\r\n    }\r\n    const corr = c.res.headers.get('X-Correlation-Id') || '';\r\n    await writeAudit(c.env as unknown as Parameters<typeof writeAudit>[0], {\r\n      type: 'health_data_created',\r\n      actor: 'api',\r\n      resource: 'kv:health',\r\n      meta: { type: parsed.data.type, correlationId: corr },\r\n    });\r\n  } catch (e) {\r\n    log.error('KV write failed', { error: (e as Error).message });\r\n    // Fail closed without leaking sensitive data\r\n    return c.json({ error: 'server_error' }, 500);\r\n  }\r\n\r\n  return c.json({ ok: true, data: parsed.data }, 201);\r\n});\r\n\r\n// SPA fallback to index.html using ASSETS binding\r\napp.get('*', async (c) => {\r\n  const url = new URL('/index.html', c.req.url);\r\n  if (!c.env.ASSETS) return c.text('Not Found', 404);\r\n  return c.env.ASSETS.fetch(new Request(url.toString(), c.req.raw));\r\n});\r\n\r\nexport default app;\r\n\r\n// Scheduled purge entry (Cloudflare Cron Triggers)\r\nexport async function scheduled(\r\n  _controller: { cron: string; scheduledTime: number },\r\n  env: Env,\r\n  ctx: { waitUntil: (p: Promise<unknown>) => void }\r\n) {\r\n  const kv = env.HEALTH_KV as unknown as KVNamespaceLite | undefined;\r\n  if (!kv) return;\r\n  ctx.waitUntil(purgeOldHealthData(env, kv));\r\n}\r\n\r\n// Durable Object: RateLimiter (exported for Wrangler binding)\r\ntype DOStorage = {\r\n  get: (key: string) => Promise<unknown>;\r\n  put: (key: string, value: unknown) => Promise<void>;\r\n};\r\ntype DurableObjectState = { storage: DOStorage };\r\nexport class RateLimiter {\r\n  private readonly storage: DOStorage;\r\n  constructor(state: DurableObjectState) {\r\n    this.storage = state.storage;\r\n  }\r\n  async fetch(request: Request): Promise<Response> {\r\n    const url = new URL(request.url);\r\n    const key = url.searchParams.get('key') || 'anon';\r\n    const limit = Number(url.searchParams.get('limit') || 60);\r\n    const interval = Number(url.searchParams.get('intervalMs') || 60_000);\r\n    const probe = url.searchParams.get('probe') === '1';\r\n\r\n    const now = Date.now();\r\n    const saved = (await this.storage.get(key)) as\r\n      | { tokens: number; last: number }\r\n      | undefined;\r\n    const record: { tokens: number; last: number } =\r\n      saved &&\r\n      typeof saved.tokens === 'number' &&\r\n      typeof saved.last === 'number'\r\n        ? { tokens: saved.tokens, last: saved.last }\r\n        : { tokens: limit, last: now };\r\n    const elapsed = now - record.last;\r\n    const refill = Math.floor(elapsed / interval) * limit;\r\n    record.tokens = Math.min(limit, record.tokens + refill);\r\n    record.last = now;\r\n    if (!probe && record.tokens <= 0) {\r\n      await this.storage.put(key, record);\r\n      return new Response(JSON.stringify({ ok: false }), {\r\n        status: 429,\r\n        headers: { 'content-type': 'application/json' },\r\n      });\r\n    }\r\n    if (!probe) {\r\n      record.tokens -= 1;\r\n      await this.storage.put(key, record);\r\n    }\r\n    return new Response(\r\n      JSON.stringify({ ok: true, remaining: record.tokens }),\r\n      { status: 200, headers: { 'content-type': 'application/json' } }\r\n    );\r\n  }\r\n}\r\n"],"names":["compose","middleware","onError","onNotFound","context","next","index","dispatch","i","res","isError","handler","err","GET_MATCH_RESULT","parseBody","request","options","all","dot","contentType","HonoRequest","parseFormData","formData","convertFormDataToBodyData","form","value","key","handleParsingAllValues","handleParsingNestedValues","nestedForm","keys","key2","splitPath","path","paths","splitRoutingPath","routePath","groups","extractGroupsFromPath","replaceGroupMarks","match","mark","j","patternCache","getPattern","label","cacheKey","tryDecode","str","decoder","tryDecodeURI","getPath","url","start","charCode","queryIndex","getPathNoStrict","result","mergePath","base","sub","rest","checkOptionalParameter","segments","results","basePath","segment","optionalSegment","v","a","_decodeURI","decodeURIComponent_","_getQueryParam","multiple","encoded","keyIndex2","trailingKeyCode","valueIndex","endIndex","keyIndex","nextKeyIndex","name","getQueryParam","getQueryParams","tryDecodeURIComponent","_validatedData","_matchResult","_HonoRequest_instances","getDecodedParam_fn","getAllDecodedParams_fn","getParamValue_fn","_cachedBody","_a","matchResult","__privateAdd","__publicField","bodyCache","raw","cachedBody","anyCachedKey","body","__privateSet","__privateMethod","headerData","__privateGet","text","target","data","route","paramKey","param","decoded","HtmlEscapedCallbackPhase","resolveCallback","phase","preserveCallbacks","buffer","callbacks","c","str2","TEXT_PLAIN","setDefaultContentType","headers","_rawRequest","_req","_var","_status","_executionCtx","_res","_layout","_renderer","_notFoundHandler","_preparedHeaders","_path","_Context_instances","newResponse_fn","Context","req","args","content","layout","renderer","status","arg","object","html","html2","location","locationString","k","cookies","cookie","responseHeaders","argHeaders","v2","METHOD_NAME_ALL","METHOD_NAME_ALL_LOWERCASE","METHODS","MESSAGE_MATCHER_IS_ALREADY_BUILT","UnsupportedPathError","COMPOSED_HANDLER","notFoundHandler","errorHandler","_Hono_instances","clone_fn","addRoute_fn","handleError_fn","dispatch_fn","Hono","input","requestInit","Env","executionCtx","event","method","args1","handlers","p","m","arg1","strict","optionsWithoutStrict","app","subApp","r","applicationHandler","replaceRequest","optionHandler","getOptions","options2","executionContext","mergedPath","pathPrefixLength","clone","env","resolved","composed","LABEL_REG_EXP_STR","ONLY_WILDCARD_REG_EXP_STR","TAIL_WILDCARD_REG_EXP_STR","PATH_ERROR","regExpMetaChars","compareKey","b","_index","_varIndex","_children","Node","tokens","paramMap","pathErrorCheckOnly","token","restTokens","pattern","node","regexpStr","strList","_context","_root","Trie","paramAssoc","replaced","regexp","captureIndex","indexReplacementMap","paramReplacementMap","_","handlerIndex","paramIndex","emptyParam","nullMatcher","wildcardRegExpCache","buildWildcardRegExp","metaChar","clearWildcardRegExpCache","buildMatcherFromPreprocessedRoutes","routes","trie","handlerData","routesWithStaticPathFlag","isStaticA","pathA","isStaticB","pathB","staticMap","len","h","e","paramCount","paramIndexMap","len2","map","len3","handlerMap","findMiddleware","_middleware","_routes","_RegExpRouter_instances","buildAllMatchers_fn","buildMatcher_fn","RegExpRouter","re","path2","matchers","method2","matcher","staticMatch","hasOwnRoute","ownRoute","_routers","SmartRouter","init","routers","router","i2","emptyParams","_methods","_patterns","_order","_params","_Node_instances","getHandlerSets_fn","children","__privateWrapper","curNode","parts","possibleKeys","nextP","handlerSets","curNodes","curNodesQueue","part","isLast","tempNodes","nextNode","params","astNode","child","restPathString","componentCount","nodeParams","handlerSet","processedSet","processed","_node","TrieRouter","HonoBase","util","assertIs","_arg","assertNever","_x","items","obj","item","validKeys","filtered","arr","checker","val","joinValues","array","separator","objectUtil","first","second","ZodParsedType","getParsedType","ZodIssueCode","ZodError","issues","subs","actualProto","_mapper","mapper","issue","fieldErrors","processError","error","curr","el","formErrors","firstEl","errorMap","_ctx","message","overrideErrorMap","defaultErrorMap","getErrorMap","makeIssue","errorMaps","issueData","fullPath","fullIssue","errorMessage","maps","addIssueToContext","ctx","overrideMap","x","ParseStatus","arrayValue","s","INVALID","pairs","syncPairs","pair","finalObject","DIRTY","OK","isAborted","isDirty","isValid","isAsync","errorUtil","ParseInputLazyPath","parent","handleResult","processCreateParams","invalid_type_error","required_error","description","iss","ZodType","_b","maybeAsyncResult","check","getIssueProperties","setError","refinementData","refinement","ZodEffects","ZodFirstPartyTypeKind","def","ZodOptional","ZodNullable","ZodArray","ZodPromise","option","ZodUnion","incoming","ZodIntersection","transform","defaultValueFunc","ZodDefault","ZodBranded","catchValueFunc","ZodCatch","This","ZodPipeline","ZodReadonly","cuidRegex","cuid2Regex","ulidRegex","uuidRegex","nanoidRegex","jwtRegex","durationRegex","emailRegex","_emojiRegex","emojiRegex","ipv4Regex","ipv4CidrRegex","ipv6Regex","ipv6CidrRegex","base64Regex","base64urlRegex","dateRegexSource","dateRegex","timeRegexSource","secondsRegexSource","secondsQuantifier","timeRegex","datetimeRegex","regex","opts","isValidIP","ip","version","isValidJWT","jwt","alg","header","base64","isValidCidr","ZodString","tooBig","tooSmall","validation","minLength","maxLength","ch","min","max","floatSafeRemainder","step","valDecCount","stepDecCount","decCount","valInt","stepInt","ZodNumber","kind","inclusive","ZodBigInt","ZodBoolean","ZodDate","minDate","maxDate","ZodSymbol","ZodUndefined","ZodNull","ZodAny","ZodUnknown","ZodNever","ZodVoid","schema","deepPartialify","ZodObject","newShape","fieldSchema","ZodTuple","shape","shapeKeys","extraKeys","keyValidator","unknownKeys","catchall","defaultError","augmentation","merging","mask","newField","createZodEnum","handleResults","unionErrors","childCtx","dirty","types","mergeValues","aType","bType","bKeys","sharedKeys","newObj","sharedValue","newArray","itemA","itemB","handleParsed","parsedLeft","parsedRight","merged","left","right","itemIndex","schemas","ZodMap","keyType","valueType","finalMap","ZodSet","finalizeSet","elements","parsedSet","element","minSize","maxSize","size","ZodLazy","getter","ZodLiteral","values","ZodEnum","expectedValues","enumValues","newDef","opt","ZodNativeEnum","nativeEnumValues","promisified","effect","checkCtx","executeRefinement","acc","inner","preprocess","type","newCtx","ZodNaN","inResult","freeze","stringType","numberType","booleanType","unknownType","objectType","enumType","coerce","z.object","z.enum","z.unknown","z.string","healthMetricSchema","z.number","processedHealthDataSchema","z.boolean","log","msg","meta","safeMeta","blocked","out","applySecurityHeaders","resp","csp","corsHeaders","origin","allowedOrigins","allow","validateBearerJWT","payload","now","skew","b64urlToBytes","pad","b64","bytes","jwksCache","getCryptoKeyForKid","jwksUrl","kid","cached","json","verifyJwtWithJwks","dataBytes","sigBytes","dataArr","sigArr","decodeJwtPayload","writeAudit","at","line","eventKey","getAesKey","base64Key","encryptJSON","iv","ct","decryptJSON","pt","DAY","policies","getTtlSecondsForType","environment","purgeOldHealthData","kv","limit","prefix","listing","scanned","deleted","iso","ttlSec","ts","cutoff","buckets","rateLimit","intervalMs","elapsed","refill","rateLimitDO","id","stub","u","deriveRateLimitKey","auth","requireAuth","allowed","correlationId","encKeyB64","sample","bogus","jwks","withBodies","objects","events","got","querySchema","z.coerce","parsed","from","to","metric","cursor","keyObj","rows","objUnknown","parsedRow","encKey","ttl","corr","scheduled","_controller","RateLimiter","state","interval","probe","saved","record"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]}