// 🚀 VitalSense App - Complete Navigation Restored
import { Suspense, lazy, useCallback, useMemo, useState } from 'react';
import { ErrorBoundary } from 'react-error-boundary';

// Core components
import Footer from '@/components/Footer';
import NavigationHeader from '@/components/NavigationHeader';
import { ErrorFallb        {/* Main Content Area */}
        <div className="flex-1 lg:ml-0">
          {/* Simple Debug Header - Direct hamburger */}
          <div className="border-b border-gray-200 bg-white">
            <div className="h-16 flex items-center justify-between px-4 lg:px-8">
              {/* Direct Hamburger Menu */}
              <button
                onClick={toggleSidebar}
                className="flex items-center gap-2 px-3 py-2 text-gray-700 border-2 border-red-500 bg-red-100 rounded hover:bg-red-200"
                style={{ fontSize: '16px', fontWeight: 'bold' }}
              >
                <span>☰</span>
                <span>CLICK ME TO TOGGLE</span>
              </button>
              
              <h1 className="text-lg font-semibold">VitalSense - Debug Mode</h1>
              
              <div className="text-sm text-gray-600">
                Sidebar: <strong>{sidebarOpen ? 'OPEN' : 'CLOSED'}</strong>
              </div>
            </div>
          </div>

          {/* Original Navigation Header - Hidden for debugging */}
          <div className="hidden">
            <NavigationHeader
              currentPageInfo={currentPageInfo}
              themeMode="light"
              onThemeToggle={() => {}}
              onNavigate={setActiveTab}
              onToggleSidebar={toggleSidebar}
              sidebarCollapsed={!sidebarOpen}
              healthScore={effectiveHealthData?.healthScore}
              hasAlerts={false}
            />
          </div>rrorFallback';

// Icons for navigation - Complete set
import { Button } from '@/components/ui/button';
import {
  Activity,
  AlertTriangle,
  Bell,
  Brain,
  Clock,
  CloudUpload,
  Heart,
  Lightbulb,
  Menu as List,
  Monitor,
  Pill,
  Search,
  Settings,
  Share,
  Shield,
  Smartphone,
  Target,
  Trophy,
  Upload,
  Users,
  X,
} from 'lucide-react';

// Lazy-loaded sections
const HealthDashboard = lazy(
  () => import('@/components/sections/HealthDashboard')
);
const GameCenter = lazy(() => import('@/components/sections/GameCenter'));
const SettingsPanel = lazy(() => import('@/components/sections/SettingsPanel'));
const UserProfile = lazy(() => import('@/components/auth/UserProfile'));

// Loading component
const VitalSenseLoader = () => (
  <div className="p-12 flex items-center justify-center">
    <div className="text-center">
      <div className="animate-spin h-10 w-10 mx-auto mb-6 rounded-full border-4 border-vitalsense-primary border-t-transparent"></div>
      <p className="text-vitalsense-gray text-base">Loading VitalSense...</p>
    </div>
  </div>
);

export default function App() {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [toggleCount, setToggleCount] = useState(0);

  // Mock health data
  const effectiveHealthData = {
    healthScore: 85,
    lastUpdated: new Date().toISOString(),
  };

  const hasHealthData = true;

  // Complete navigation structure (restored from original)
  const navigationItems = useMemo(
    () => ({
      main: [
        { id: 'dashboard', label: 'VitalSense Dashboard', icon: Heart },
        { id: 'health-overview', label: 'Health Overview', icon: Monitor },
        { id: 'fall-detection', label: 'Fall Risk Monitor', icon: Shield },
        { id: 'posture-analysis', label: 'Posture Analysis', icon: Activity },
        { id: 'walking-patterns', label: 'Walking Patterns', icon: Activity },
        { id: 'gait-analysis', label: 'Gait Analysis', icon: Target },
        {
          id: 'real-sensor-gait',
          label: 'Real Sensor Analysis',
          icon: Smartphone,
        },
        { id: 'emergency', label: 'Emergency Alert', icon: AlertTriangle },
        { id: 'recommendations', label: 'Recommendations', icon: Lightbulb },
        { id: 'smart-notifications', label: 'Smart Notifications', icon: Bell },
        { id: 'search', label: 'Search', icon: Search },
      ],
      monitoring: [
        { id: 'realtime-scoring', label: 'Live Health Score', icon: Heart },
        { id: 'alerts', label: 'Health Alerts', icon: Bell },
        { id: 'predictive-alerts', label: 'Predictive Alerts', icon: Brain },
        { id: 'history', label: 'History', icon: Clock },
      ],
      ai: [
        {
          id: 'ai-recommendations',
          label: 'AI Recommendations',
          icon: Activity,
        },
        { id: 'ml-predictions', label: 'ML Predictions', icon: Activity },
        { id: 'movement-patterns', label: 'Movement Analysis', icon: Activity },
        { id: 'realtime', label: 'Fall Detection', icon: Activity },
      ],
      advanced: [
        {
          id: 'enhanced-health-system',
          label: 'Enhanced Health System',
          icon: Brain,
        },
        { id: 'monitoring-hub', label: 'Monitoring Hub', icon: Activity },
        {
          id: 'live-integration',
          label: 'Live Integration',
          icon: CloudUpload,
        },
        { id: 'advanced-Watch', label: 'Watch Integration', icon: Activity },
        {
          id: 'ios26-navigation',
          label: 'iOS 26 Advanced Navigation',
          icon: List,
        },
      ],
      gamification: [
        { id: 'game-center', label: 'Game Center', icon: Trophy },
        { id: 'family-challenges', label: 'Family Challenges', icon: Target },
      ],
      community: [
        { id: 'family', label: 'Family Dashboard', icon: Users },
        { id: 'community', label: 'Community Share', icon: Share },
        { id: 'healthcare', label: 'Healthcare Portal', icon: Heart },
      ],
      management: [
        { id: 'contacts', label: 'Emergency Contacts', icon: Users },
        { id: 'enhanced-upload', label: 'Enhanced Upload', icon: CloudUpload },
        { id: 'import', label: 'Import Data', icon: Upload },
        { id: 'export', label: 'Export Data', icon: Upload },
        { id: 'devices', label: 'Connected Devices', icon: Smartphone },
        { id: 'medications', label: 'Medications', icon: Pill },
        { id: 'workouts', label: 'Workouts', icon: Activity },
        { id: 'settings', label: 'Health Settings', icon: Settings },
      ],
      profile: [{ id: 'user-profile', label: 'User Profile', icon: Users }],
    }),
    []
  );

  // Flatten all navigation items for tabs
  const allNavigationTabs = useMemo(
    () => [
      ...navigationItems.main,
      ...navigationItems.monitoring,
      ...navigationItems.ai,
      ...navigationItems.advanced,
      ...navigationItems.gamification,
      ...navigationItems.community,
      ...navigationItems.management,
      ...navigationItems.profile,
    ],
    [navigationItems]
  );

  // Get current page details for breadcrumb
  const getCurrentPageInfo = useCallback(() => {
    const currentItem = allNavigationTabs.find((item) => item.id === activeTab);

    if (!currentItem) return { label: 'Dashboard', category: 'Main' };

    let category = 'Main';
    if (navigationItems.monitoring.find((item) => item.id === activeTab))
      category = 'Monitoring';
    if (navigationItems.ai.find((item) => item.id === activeTab))
      category = 'AI & ML';
    if (navigationItems.advanced.find((item) => item.id === activeTab))
      category = 'Advanced';
    if (navigationItems.gamification.find((item) => item.id === activeTab))
      category = 'Gamification';
    if (navigationItems.community.find((item) => item.id === activeTab))
      category = 'Community';
    if (navigationItems.management.find((item) => item.id === activeTab))
      category = 'Management';
    if (navigationItems.profile.find((item) => item.id === activeTab))
      category = 'Profile';

    return { label: currentItem.label, category };
  }, [activeTab, allNavigationTabs, navigationItems]);

  const currentPageInfo = getCurrentPageInfo();

  const toggleSidebar = () => {
    console.log('🔄 Hamburger clicked! Current sidebar state:', sidebarOpen);
    setSidebarOpen(!sidebarOpen);
    setToggleCount(prev => prev + 1);
    console.log('🔄 New sidebar state will be:', !sidebarOpen);
    
    // Additional debug info
    setTimeout(() => {
      const sidebar = document.querySelector('[class*="sidebar"]') || document.querySelector('[class*="w-64"]');
      const overlay = document.querySelector('[class*="bg-black bg-opacity-50"]');
      console.log('🔍 DOM Debug after toggle:');
      console.log('  - Sidebar element:', sidebar);
      console.log('  - Sidebar classes:', sidebar?.className);
      console.log('  - Overlay element:', overlay);
      console.log('  - Overlay classes:', overlay?.className);
      
      // Update DOM counter
      const counterElement = document.getElementById('toggle-count');
      if (counterElement) {
        counterElement.textContent = (parseInt(counterElement.textContent || '0') + 1).toString();
      }
    }, 100);
  };

  const handleTabClick = (tabId: string) => {
    setActiveTab(tabId);
    setSidebarOpen(false); // Close sidebar on mobile when tab is selected
  };

  const renderSidebarSection = (
    title: string,
    items: typeof navigationItems.main
  ) => (
    <div className="space-y-2">
      <h3 className="text-xs px-2 font-semibold uppercase tracking-wider text-gray-500">
        {title}
      </h3>
      <div className="space-y-1">
        {items.map((tab) => {
          const isActive = tab.id === activeTab;
          const IconComponent = tab.icon;

          return (
            <button
              key={tab.id}
              onClick={() => handleTabClick(tab.id)}
              className={`
                gap-3 px-3 flex w-full items-center rounded-md py-2 text-left text-sm transition-colors
                ${
                  isActive
                    ? 'bg-vitalsense-primary text-white'
                    : 'text-gray-700 hover:bg-gray-100'
                }
              `}
            >
              <IconComponent className="h-4 w-4" />
              <span>{tab.label}</span>
            </button>
          );
        })}
      </div>
    </div>
  );

  return (
    <ErrorBoundary FallbackComponent={ErrorFallback}>
      <div className="bg-vitalsense-background flex min-h-screen">
        {/* Sidebar - Consistent hide/show behavior on all screen sizes */}
        <div
          className={`
          fixed inset-y-0 left-0 z-50 w-64 bg-white border-r border-gray-200 
          transform transition-transform duration-300 ease-in-out overflow-y-auto
          ${sidebarOpen ? 'translate-x-0' : '-translate-x-full'}
        `}
          style={{
            backgroundColor: sidebarOpen ? '#f0fff0' : '#fff0f0' // Debug: green when open, red when closed
          }}
        >
          {/* Sidebar Header */}
          <div className="h-16 border-gray-200 flex flex-shrink-0 items-center justify-between border-b px-4">
            <div className="flex items-center gap-2">
              <Heart className="h-5 w-5 text-vitalsense-primary" />
              <span className="font-semibold text-gray-900">VitalSense</span>
            </div>
            <Button
              variant="ghost"
              size="sm"
              onClick={toggleSidebar}
              className=""
            >
              <X className="h-4 w-4" />
            </Button>
          </div>

          {/* Sidebar Navigation */}
          <nav className="flex-1 space-y-6 px-4 py-6">
            {renderSidebarSection('Main Features', navigationItems.main)}
            {renderSidebarSection(
              'Monitoring & Alerts',
              navigationItems.monitoring
            )}
            {renderSidebarSection('AI & Machine Learning', navigationItems.ai)}
            {renderSidebarSection(
              'Advanced Features',
              navigationItems.advanced
            )}
            {renderSidebarSection('Gamification', navigationItems.gamification)}
            {renderSidebarSection(
              'Community & Care',
              navigationItems.community
            )}
            {renderSidebarSection('Management', navigationItems.management)}
            {renderSidebarSection('User Profile', navigationItems.profile)}
          </nav>

          {/* Sidebar Footer */}
          <div className="border-gray-200 flex-shrink-0 border-t p-4">
            <div className="text-xs flex items-center gap-2 text-gray-500">
              <Activity className="h-3 w-3" />
              <span>Health Score: {effectiveHealthData?.healthScore}/100</span>
            </div>
          </div>
        </div>

        {/* Overlay when sidebar is open */}
        {sidebarOpen && (
          <button
            className="bg-opacity-50 fixed inset-0 z-40 bg-black"
            onClick={() => setSidebarOpen(false)}
            onKeyDown={(e) => e.key === 'Escape' && setSidebarOpen(false)}
            aria-label="Close sidebar"
          />
        )}

        {/* Main Content Area */}
        <div className="flex-1 lg:ml-0">
          {/* Navigation Header */}
          <div className="border-gray-200 border-b bg-white">
            <NavigationHeader
              currentPageInfo={currentPageInfo}
              themeMode="light"
              onThemeToggle={() => {}}
              onNavigate={setActiveTab}
              onToggleSidebar={toggleSidebar}
              sidebarCollapsed={!sidebarOpen}
              healthScore={effectiveHealthData?.healthScore}
              hasAlerts={false}
            />
          </div>

          {/* Tab Navigation - Show subset of main tabs */}
          <div className="top-16 sticky z-20 border-b border-gray-100 bg-white">
            <div className="px-4 lg:px-8">
              <div
                className="flex overflow-x-auto"
                role="tablist"
                aria-label="Main navigation"
              >
                {navigationItems.main.slice(0, 8).map((tab) => {
                  const isActive = tab.id === activeTab;
                  const IconComponent = tab.icon;

                  return (
                    <button
                      key={tab.id}
                      onClick={() => setActiveTab(tab.id)}
                      className={`
                        py-3 flex items-center space-x-2 whitespace-nowrap border-b-2
                        px-4 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-vitalsense-primary
                        ${
                          isActive
                            ? 'border-vitalsense-primary font-medium text-vitalsense-primary'
                            : 'text-gray-600 hover:border-gray-200 border-transparent hover:text-vitalsense-primary'
                        }
                      `}
                      role="tab"
                      aria-selected={isActive ? 'true' : 'false'}
                      aria-controls={`tabpanel-${tab.id}`}
                    >
                      <IconComponent className="h-4 w-4" />
                      <span className="hidden sm:inline">{tab.label}</span>
                    </button>
                  );
                })}
              </div>
            </div>
          </div>

          {/* Main Content */}
          {/* Main Content */}
          <main className="flex-1 overflow-y-auto px-4 py-6 md:px-6 md:py-8">
            {/* Debug Info */}
            <div className="mb-4 p-4 bg-blue-50 border border-blue-200 rounded">
              <p><strong>🐛 Debug Info:</strong></p>
              <p>Sidebar State: <strong>{sidebarOpen ? '✅ OPEN' : '❌ CLOSED'}</strong></p>
              <p>Toggle Count: <span id="toggle-count">0</span></p>
              <p>Click the hamburger menu (☰) in the header above to test.</p>
            </div>
            
            {!hasHealthData ? (
              <div className="mx-auto mt-8 max-w-2xl">
                <div className="rounded-xl border border-gray-100 bg-white p-8 shadow-sm">
                  <h2 className="mb-3 text-xl font-semibold text-vitalsense-primary">
                    Welcome to VitalSense
                  </h2>
                  <p className="text-gray-600 mt-2 leading-relaxed">
                    Connect your health data to get started with personalized
                    insights.
                  </p>
                </div>
              </div>
            ) : (
              <div className="mx-auto max-w-7xl space-y-8">
                <Suspense fallback={<VitalSenseLoader />}>
                  {(activeTab === 'dashboard' ||
                    activeTab === 'health-overview') && <HealthDashboard />}
                  {(activeTab === 'games' || activeTab === 'game-center') && (
                    <GameCenter />
                  )}
                  {activeTab === 'settings' && <SettingsPanel />}
                  {activeTab === 'user-profile' && <UserProfile />}
                  {activeTab === 'test' && (
                    <div className="bg-green-50 border-green-200 rounded-xl border p-8 shadow-sm">
                      <h2 className="text-green-800 mb-4 text-2xl font-bold">
                        ✅ Complete Navigation Restored!
                      </h2>
                      <p className="mb-3 text-green-700">
                        Full VitalSense navigation system with{' '}
                        {allNavigationTabs.length} components! Sidebar state:{' '}
                        {sidebarOpen ? 'Open' : 'Closed'}
                      </p>
                      <div className="mt-4 space-y-2">
                        <p className="text-green-600 text-sm">
                          <strong>Navigation sections:</strong>
                        </p>
                        <ul className="text-green-600 space-y-1 text-sm">
                          <li>
                            • Main Features ({navigationItems.main.length}{' '}
                            items)
                          </li>
                          <li>
                            • Monitoring & Alerts (
                            {navigationItems.monitoring.length} items)
                          </li>
                          <li>• AI & ML ({navigationItems.ai.length} items)</li>
                          <li>
                            • Advanced ({navigationItems.advanced.length} items)
                          </li>
                          <li>
                            • Gamification (
                            {navigationItems.gamification.length} items)
                          </li>
                          <li>
                            • Community ({navigationItems.community.length}{' '}
                            items)
                          </li>
                          <li>
                            • Management ({navigationItems.management.length}{' '}
                            items)
                          </li>
                          <li>
                            • Profile ({navigationItems.profile.length} items)
                          </li>
                        </ul>
                      </div>
                    </div>
                  )}
                  {/* Default message for other tabs */}
                  {![
                    'dashboard',
                    'health-overview',
                    'games',
                    'game-center',
                    'settings',
                    'user-profile',
                    'test',
                  ].includes(activeTab) && (
                    <div className="bg-blue-50 border-blue-200 rounded-xl border p-8 shadow-sm">
                      <h2 className="text-blue-800 mb-4 text-2xl font-bold">
                        🚧 {currentPageInfo.label}
                      </h2>
                      <p className="mb-3 text-blue-700">
                        This {currentPageInfo.category} component is available
                        in the navigation but not yet implemented.
                      </p>
                      <p className="text-blue-600 text-sm">
                        Navigate using the sidebar or tabs above to explore
                        implemented features.
                      </p>
                    </div>
                  )}
                </Suspense>
              </div>
            )}
          </main>

          {/* Footer */}
          <div className="mt-12 border-t border-gray-100">
            <Footer
              healthScore={effectiveHealthData?.healthScore}
              lastSync={
                effectiveHealthData?.lastUpdated
                  ? new Date(effectiveHealthData.lastUpdated)
                  : undefined
              }
              connectionStatus="connected"
              onNavigate={setActiveTab}
            />
          </div>
        </div>
      </div>
    </ErrorBoundary>
  );
}
